[{"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/index.js":"1","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/reportWebVitals.js":"2","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/App.js":"3","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Game.js":"4","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Board.js":"5","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/eventsfile.js":"6"},{"size":535,"mtime":1677962875959,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1677962875959,"results":"9","hashOfConfig":"8"},{"size":341,"mtime":1680053928344,"results":"10","hashOfConfig":"8"},{"size":13244,"mtime":1681169756365,"results":"11","hashOfConfig":"8"},{"size":17201,"mtime":1681221975763,"results":"12","hashOfConfig":"8"},{"size":7323,"mtime":1681221863407,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10ybc25",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/index.js",[],[],"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/reportWebVitals.js",[],[],"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/App.js",["33","34"],[],"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Game.js",["35","36","37","38","39","40","41","42","43","44","45","46"],[],"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Board.js",["47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72"],[],"import React, {Component, useEffect, useState} from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Popup from 'reactjs-popup';\n\nimport dice from './GameDieBigpng.png'\nimport playerList from './PlayerListBackground.png'\nimport gamelogo from './Upward_Mobility_big.png'\nimport { moveDist } from \"./Game\";\nimport { eventsArray} from \"./eventsfile\";\n\n// console.log(\"Events array: \" + eventsArray)\n\nexport function UpwardMobilityBoard ({ctx, G, moves, events, eventsArray}){\n\n    const [disPlayerName, setPlayerName] = useState(\"\")\n    const [disPlayerJob, setPlayerJob] = useState(\"\")\n    const [disPlayerCur, setPlayerCur] = useState(\"\")\n\n    const [disPlay1Name, setPlay1Name] = useState(\"\")\n    const [disPlay2Name, setPlay2Name] = useState(\"\")\n    const [disPlay3Name, setPlay3Name] = useState(\"\")\n    const [disPlay4Name, setPlay4Name] = useState(\"\")\n    const [disPlay5Name, setPlay5Name] = useState(\"\")\n    const [disPlay6Name, setPlay6Name] = useState(\"\")\n\n    const [disPlay1Job, setPlay1Job] = useState(\"\")\n    const [disPlay2Job, setPlay2Job] = useState(\"\")\n    const [disPlay3Job, setPlay3Job] = useState(\"\")\n    const [disPlay4Job, setPlay4Job] = useState(\"\")\n    const [disPlay5Job, setPlay5Job] = useState(\"\")\n    const [disPlay6Job, setPlay6Job] = useState(\"\")\n\n    useEffect(() =>{\n        setPlayerName(\"Player 1\")\n        setPlayerJob(\"Job: \" + G.players[0].jobTitle)\n        setPlayerCur(\"$\" + G.players[0].currency)\n    })\n\n    useEffect(()=>{\n      if(G.players[0] !== undefined){\n          setPlay1Name(\"Player 1\")\n          setPlay1Job(G.players[0].jobTitle)\n      }\n      if(G.players[1] !== undefined){\n          setPlay2Name(\"Player 2\")\n          setPlay2Job(G.players[1].jobTitle)\n      }\n      if(G.players[2] !== undefined){\n          setPlay3Name(\"Player 3\")\n          setPlay3Job(G.players[2].jobTitle)\n      }\n        if(G.players[3] !== undefined){\n            setPlay4Name(\"Player 4\")\n            setPlay4Job(G.players[3].jobTitle)\n        }\n        if(G.players[4] !== undefined){\n            setPlay5Name(\"Player 5\")\n            setPlay5Job(G.players[4].jobTitle)\n        }\n        if(G.players[5] !== undefined){\n            setPlay6Name(\"Player 6\")\n            setPlay6Job(G.players[5].jobTitle)\n        }\n    })\n\n\n    let alreadyGen = false;\n\n    useEffect(() => {\n        // console.log(\"testing useEffect\")\n    }, );\n\n    if (G.players[ctx.currentPlayer].position >= 50) {\n        // events.setPhase(\"winningGameScreen\");\n        console.log(\"if case for winningGameScreen\")\n        ctx.phase = \"winningGameScreen\"\n    }\n\n    useEffect(() => {\n        if(alreadyGen === false){\n            for(let i = 0; i< 2; i++){\n                if(G.players[i] !== undefined){\n                    let playerToken = document.createElement(\"div\")\n                    playerToken.setAttribute(\"id\", \"playerToken\" + i);\n                    playerToken.setAttribute(\"class\", \"playerToken\")\n                    playerToken.style.top = \"93%\"\n                    if(i ==0)\n                        playerToken.style.backgroundColor = \"rgba(234,0,217,1)\"\n                    if(i ==1)\n                        playerToken.style.backgroundColor = \"rgba(115,248,255,1)\"\n                    if(i == 2)\n                        playerToken.style.backgroundColor = \"rgba(0,201,60,1)\"\n                    if(i == 3)\n                        playerToken.style.backgroundColor = \"rgba(196,0,0,1)\"\n                    if(i == 4)\n                        playerToken.style.backgroundColor = \"rgba(105,0,225,1)\"\n                    if(i == 5)\n                        playerToken.style.backgroundColor = \"rgba(0,61,204,1)\"\n\n                    document.getElementById(\"progressionDiv\").append(playerToken)\n                }\n            }\n            alreadyGen = true;\n        }\n    })\n\n    const handleAnswerSelect = (answerIndex) => {\n        moves.selectAnswer(answerIndex);\n    };\n\n    const { moveDist } = G;\n\n    const [selectedItem, setSelectedItem] = useState(null);\n\n    let eventScreenContents = \"\";\n\n    let inventoryScreenContents = (\n        <div>\n            {G.players[ctx.currentPlayer].inventory && G.players[ctx.currentPlayer].inventory.map((item, index) => (\n                <img key={index} className=\"InventoryImage\" id={`inventoryItem-${index}`} src={item.image}/>\n            ))}\n        </div>\n    )\n\n    switch (ctx.phase) {\n        case \"rollScreen\":\n            eventScreenContents = (\n                <div>\n                    <button onClick = {() => moves.rollDice()}  className=\"DiceButton\" id=\"DiceButton\"></button>\n                    <img  onClick = {() => moves.rollDice()} className=\"DiceImage\" id=\"NoPath_-_Copy_8\" src=\"NoPath_-_Copy_8.png\" srcSet=\"NoPath_-_Copy_8.png 1x, NoPath_-_Copy_8@2x.png 2x\"/>\n                    <div id=\"A_pair_of_strange_dice_lay_bef\">\n                        A pair of strange dice lay before you...\n                    </div>\n                </div>\n            )\n            // if (G.players[ctx.currentPlayer].position === 25) {\n            //     events.setPhase(\"winningGameScreen\");\n            //     G.winningPlayer = ctx.currentPlayer;\n            // }\n            break;\n        case \"eventOrItemScreen\":\n            eventScreenContents = (\n                <div>\n                    <span id=\"rollVal\" className=\"inGameText\"> Player {ctx.currentPlayer + 1} with job title: {G.players[ctx.currentPlayer].jobTitle} rolls a {moveDist} landing on cell {G.players[ctx.currentPlayer].position}</span>\n                    <button onClick={() => events.setPhase(\"eventScreen\")} className=\"inGameButton\" id=\"showEventButton\">Show Event</button>\n                    <button onClick={() => events.setPhase(\"useItemScreen\")} className=\"inGameButton\" id=\"use-item-button\">Use Item</button>\n                </div>\n            )\n            break;\n        case \"eventScreen\":\n            eventScreenContents = (\n                <div>\n                    <div>\n                        <span className=\"inGameText\">{G.currentEvent.description}</span>\n                        <img className=\"EventImage\" id=\"EventImage\" src={G.currentEvent.image} />\n                    </div>\n                    <div className=\"event-button-container\">\n                        {G.currentEvent.options && G.currentEvent.options.map((option, index) => (\n                            <button key={index} onClick={() => {\n                                moves.selectAnswer(index);\n                                console.log(\"This is index: \", index)\n                                console.log(\"This is event response: \", G.currentEvent.results[index].effect)\n                                moves.eventResponse(G.currentEvent.results[index].effect);\n                                moves.pickUpItem(G.currentEvent.results[index].item[0].name);\n                                events.setPhase(\"eventResponseScreen\");\n\n                            }} className=\"answerButton\">{option}</button>\n                        ))}\n                    </div>\n\n                </div>\n            )\n\n            break;\n\n        case \"useItemScreen\":\n            eventScreenContents = (\n                <div>\n                    <span className=\"inGameText\">This is the use item screen</span>\n                    <div className=\"dropdown-container\">\n                        <Dropdown onSelect={(key) => setSelectedItem(G.players[ctx.currentPlayer].inventory[key])}>\n                            <Dropdown.Toggle variant=\"success\">\n                                {selectedItem ? selectedItem.name : \"Select Item\"}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                {G.players[ctx.currentPlayer].inventory && G.players[ctx.currentPlayer].inventory.map((item, index) => (\n                                    <Dropdown.Item key={index} eventKey={index}>\n                                        {item.name}\n                                    </Dropdown.Item>\n                                ))}\n                            </Dropdown.Menu>\n                        </Dropdown>\n\n                    </div>\n                    <button\n                        className=\"inGameButton\" id=\"use-item-button-fromscreen\"\n                        onClick={() => {\n                            if (selectedItem) {\n                                moves.useItem(selectedItem.name);\n                                console.log(\"Selected item: \" + selectedItem.name)\n                            }\n                            events.setPhase(\"itemEffectResultScreen\");\n                        }}>Use Item\n                    </button>\n\n                    <button className=\"inGameButton\" id=\"cancel-item-button\"\n                            onClick={() => events.setPhase(\"eventOrItemScreen\")}>\n                        Cancel\n                    </button>\n                </div>\n            )\n            break;\n\n        case \"itemEffectResultScreen\":\n            eventScreenContents = (\n                <div>\n                    <span className=\"inGameText\">{selectedItem.onUse}</span>\n                    <div className=\"event-button-container\">\n                        <button onClick={() => events.setPhase(\"eventScreen\")} className=\"answerButton\">Proceed</button>\n                    </div>\n                </div>\n            );\n            break;\n\n        // case \"correctAnswerScreen\":\n        //     eventScreenContents = (\n        //         <div>\n        //             <span className=\"inGameText\">Correct Answer Screen{G.currentEvent.onCorrect}</span>\n        //             <div className=\"event-button-container\">\n        //                 <button onClick={() => events.setPhase(\"pickUpItemScreen\")} className=\"answerButton\">Pick Up Item</button>\n        //             </div>\n        //         </div>\n        //     )\n        //     break;\n\n        // case \"pickUpItemScreen\":\n        //     console.log(\"Current event from pick up item screen: \" + G.currentEvent.eventReward)\n        //\n        //     eventScreenContents = (\n        //         <div>\n        //             <span className=\"inGameText\">{G.currentEvent.eventReward.description}</span>\n        //             <div className=\"event-button-container\">\n        //                 <button onClick={() => { events.setPhase(\"endTurnScreen\"); moves.pickUpItem(G.currentEvent.eventReward) }} className=\"answerButton\">Proceed</button>\n        //             </div>\n        //         </div>\n        //     )\n        //     break;\n\n        // case \"wrongAnswerScreen\":\n        //     const incorrectIndex = G.players[ctx.currentPlayer].selectedOption;\n        //     console.log(\"This is index of users incorrect answer: \"+ incorrectIndex)\n        //     const resultAnswer = G.currentEvent.results[incorrectIndex];\n        //     eventScreenContents = (\n        //         <div>\n        //             <span className=\"inGameText\">{resultAnswer}</span>\n        //             <div className=\"event-button-container\">\n        //                 <button onClick={() => events.setPhase(\"endTurnScreen\")} className=\"answerButton\">End Turn</button>\n        //             </div>\n        //         </div>\n        //     )\n        //     break;\n\n\n            // event response screen\n\n        case \"eventResponseScreen\":\n            const answerIndex = G.players[ctx.currentPlayer].selectedOption;\n            const getEventResult = G.currentEvent.results[answerIndex].effect;\n            // console.log(\"This is index of users answer: \"+ answerIndex)\n            // console.log(\"Event effect : \" + getEventResult)\n            eventScreenContents = (\n                <div>\n                    <span className=\"inGameText\">Event Result Screen {G.currentEvent.results[answerIndex].description}</span>\n                    <div className=\"event-button-container\">\n                        <button onClick={() => events.setPhase(\"endTurnScreen\")} className=\"answerButton\">Proceed</button>\n                    </div>\n                </div>\n            )\n            break;\n\n\n        case \"winningGameScreen\":\n            eventScreenContents = (\n                <div>\n                    <span className=\"winningGameText\">Player {ctx.currentPlayer} has won the game.</span>\n                </div>\n            )\n            break;\n        case \"endTurnScreen\":\n            eventScreenContents = (\n                <div>\n                    <span className=\"inGameText\">Your turn is over!</span>\n                    <div className=\"event-button-container\">\n                        <button onClick={() => { events.endTurn(); events.setPhase(\"rollScreen\"); }} className=\"answerButton\">End Turn</button>\n\n                    </div>\n\n                </div>\n            )\n            break;\n    }\n\n    return(\n        <div className=\"GamePage\">\n            <div className=\"Rectangle_42\" id = \"eventScreen\">\n                {eventScreenContents}\n            </div>\n\n            <div className=\"GameProgression\" id = \"progressionDiv\">\n                <rect id=\"GameProgressionMenu\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\n                </rect>\n            </div>\n\n            <img id=\"ProgresionImage\" src=\"src/Templates/assets/StartFinishScale.png\" srcSet=\"NoPath_-_Copy_6.png 1x, NoPath_-_Copy_6@2x.png 2x\"/>\n\n\n            {/*Player List*/}\n            <svg className=\"GamePlayerBackground\">\n            </svg>\n            <img id=\"NoPath_-_Copy_10\" src=\"NoPath_-_Copy_10.png\" srcSet=\"NoPath_-_Copy_10.png 1x, NoPath_-_Copy_10@2x.png 2x\"/>\n\n            <div className=\"GamePlayer_1\" >\n                <span class = \"playerNameDis\">{disPlay1Name}</span>\n                <ellipse id=\"GamePlayer_1\" ></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay1Job}</span>\n            </div>\n            <div className=\"GamePlayer_2\">\n                <span className=\"playerNameDis\">{disPlay2Name}</span>\n                <ellipse id=\"GamePlayer_2\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay2Job}</span>\n            </div>\n            <div className=\"GamePlayer_3\">\n                <span className=\"playerNameDis\">{disPlay3Name}</span>\n                <ellipse id=\"GamePlayer_3\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay3Job}</span>\n            </div>\n            <div className=\"GamePlayer_4\">\n                <span className=\"playerNameDis\">{disPlay4Name}</span>\n                <ellipse id=\"GamePlayer_4\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay4Job}</span>\n            </div>\n            <div className=\"GamePlayer_5\">\n                <span className=\"playerNameDis\">{disPlay5Name}</span>\n                <ellipse id=\"GamePlayer_5\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay5Job}</span>\n            </div>\n            <div className=\"GamePlayer_6\">\n                <span className=\"playerNameDis\">{disPlay6Name}</span>\n                <ellipse id=\"GamePlayer_6\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay6Job}</span>\n            </div>\n            {/*Player List*/}\n\n\n            {/*Inventory List*/}\n            <div className=\"Inventory\">\n                <rect id=\"Inventory\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\n                    {inventoryScreenContents}\n                </rect>\n            </div>\n            <svg className=\"InventoryLabel\">\n                <rect id=\"InventoryLabel\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\n                </rect>\n            </svg>\n\n            <div id=\"Inventory_Label_Word\">\n                Inventory\n            </div>\n            {/*Inventory List*/}\n\n\n            {/*Chat List*/}\n            <div className=\"ChatAndLogo\">\n                <rect id=\"ChatAndLogo\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\"></rect>\n                <div id=\"chatSection\"></div>\n            </div>\n            <input className=\"chatBox\" type=\"text\" placeholder=\"Type here to chat\" id=\"chatBox\" rx=\"7\" ry=\"7\" x=\"0\" y=\"0\" />\n\n            <div id=\"Type_here_to_chat\">\n                <span>Type here to chat...</span>\n            </div>\n            {/*Chat List*/}\n\n\n            {/*Player Stat List*/}\n            <svg className=\"PlayerStatsBackground\">\n                <rect id=\"PlayerStatsBackground\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\n                </rect>\n\n            </svg>\n            <div className=\"PlayerName\" id=\"PlayerName\">\n                {disPlayerName}\n            </div>\n            <div className=\"PlayerJobTitle\" id=\"PlayerJobTitle\">\n                {disPlayerJob}\n            </div>\n            <img className=\"PlayerBuffsIcon\" id=\"PlayerBuffsIcon\" src=\"BuffIcon.png\" srcSet=\"BuffIcon.png 1x, BuffIcon.png.png 2x\"/>\n            <img className=\"PlayerDebuffsIcon\" id=\"PlayerDebuffsIcon\" src=\"DebuffIcon.png\" srcSet=\"DebuffIcon.png 1x, DebuffIcon.png.png 2x\"/>\n            <div className=\"PlayerCurrency\" id=\"PlayerCurrency\">\n                {disPlayerCur}\n            </div>\n            <div className=\"PlayerIncome\" id=\"PlayerIncome\">\n\n            </div>\n            {/*Player Stat List*/}\n        </div>\n    )\n}","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/eventsfile.js",["73","74","75","76","77","78"],[],{"ruleId":"79","severity":1,"message":"80","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":12},{"ruleId":"79","severity":1,"message":"83","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":13},{"ruleId":"79","severity":1,"message":"84","line":1,"column":21,"nodeType":"81","messageId":"82","endLine":1,"endColumn":27},{"ruleId":"79","severity":1,"message":"85","line":1,"column":29,"nodeType":"81","messageId":"82","endLine":1,"endColumn":35},{"ruleId":"79","severity":1,"message":"86","line":1,"column":37,"nodeType":"81","messageId":"82","endLine":1,"endColumn":41},{"ruleId":"79","severity":1,"message":"87","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":13},{"ruleId":"79","severity":1,"message":"88","line":5,"column":10,"nodeType":"81","messageId":"82","endLine":5,"endColumn":29},{"ruleId":"79","severity":1,"message":"89","line":6,"column":22,"nodeType":"81","messageId":"82","endLine":6,"endColumn":32},{"ruleId":"79","severity":1,"message":"90","line":6,"column":34,"nodeType":"81","messageId":"82","endLine":6,"endColumn":44},{"ruleId":"79","severity":1,"message":"91","line":112,"column":17,"nodeType":"81","messageId":"82","endLine":112,"endColumn":30},{"ruleId":"92","severity":1,"message":"93","line":190,"column":17,"nodeType":"94","messageId":"95","endLine":199,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":248,"column":13,"nodeType":"94","messageId":"95","endLine":263,"endColumn":14},{"ruleId":"79","severity":1,"message":"96","line":255,"column":27,"nodeType":"81","messageId":"82","endLine":255,"endColumn":39},{"ruleId":"92","severity":1,"message":"93","line":272,"column":13,"nodeType":"94","messageId":"95","endLine":282,"endColumn":14},{"ruleId":"79","severity":1,"message":"97","line":1,"column":16,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"98","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":13},{"ruleId":"79","severity":1,"message":"99","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":12},{"ruleId":"79","severity":1,"message":"100","line":7,"column":8,"nodeType":"81","messageId":"82","endLine":7,"endColumn":18},{"ruleId":"79","severity":1,"message":"101","line":8,"column":8,"nodeType":"81","messageId":"82","endLine":8,"endColumn":16},{"ruleId":"79","severity":1,"message":"102","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":18},{"ruleId":"79","severity":1,"message":"103","line":10,"column":10,"nodeType":"81","messageId":"82","endLine":10,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":34,"column":5,"nodeType":"81","endLine":34,"endColumn":14,"suggestions":"106"},{"ruleId":"104","severity":1,"message":"107","line":40,"column":5,"nodeType":"81","endLine":40,"endColumn":14,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":88,"column":26,"nodeType":"111","messageId":"112","endLine":88,"endColumn":28},{"ruleId":"109","severity":1,"message":"110","line":90,"column":26,"nodeType":"111","messageId":"112","endLine":90,"endColumn":28},{"ruleId":"109","severity":1,"message":"110","line":92,"column":26,"nodeType":"111","messageId":"112","endLine":92,"endColumn":28},{"ruleId":"109","severity":1,"message":"110","line":94,"column":26,"nodeType":"111","messageId":"112","endLine":94,"endColumn":28},{"ruleId":"109","severity":1,"message":"110","line":96,"column":26,"nodeType":"111","messageId":"112","endLine":96,"endColumn":28},{"ruleId":"109","severity":1,"message":"110","line":98,"column":26,"nodeType":"111","messageId":"112","endLine":98,"endColumn":28},{"ruleId":"104","severity":1,"message":"113","line":104,"column":26,"nodeType":"114","endLine":104,"endColumn":30},{"ruleId":"79","severity":1,"message":"115","line":108,"column":11,"nodeType":"81","messageId":"82","endLine":108,"endColumn":29},{"ruleId":"116","severity":1,"message":"117","line":121,"column":17,"nodeType":"118","endLine":121,"endColumn":109},{"ruleId":"92","severity":1,"message":"93","line":126,"column":5,"nodeType":"94","messageId":"95","endLine":302,"endColumn":6},{"ruleId":"116","severity":1,"message":"117","line":131,"column":21,"nodeType":"118","endLine":131,"endColumn":191},{"ruleId":"116","severity":1,"message":"117","line":156,"column":25,"nodeType":"118","endLine":156,"endColumn":98},{"ruleId":"79","severity":1,"message":"119","line":269,"column":19,"nodeType":"81","messageId":"82","endLine":269,"endColumn":33},{"ruleId":"116","severity":1,"message":"117","line":315,"column":13,"nodeType":"118","endLine":315,"endColumn":147},{"ruleId":"116","severity":1,"message":"117","line":321,"column":13,"nodeType":"118","endLine":321,"endColumn":129},{"ruleId":"116","severity":1,"message":"117","line":398,"column":13,"nodeType":"118","endLine":398,"endColumn":133},{"ruleId":"116","severity":1,"message":"117","line":399,"column":13,"nodeType":"118","endLine":399,"endColumn":143},{"ruleId":"79","severity":1,"message":"120","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"121","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":16},{"ruleId":"79","severity":1,"message":"122","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":16},{"ruleId":"79","severity":1,"message":"123","line":5,"column":8,"nodeType":"81","messageId":"82","endLine":5,"endColumn":20},{"ruleId":"79","severity":1,"message":"124","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":16},{"ruleId":"79","severity":1,"message":"125","line":7,"column":8,"nodeType":"81","messageId":"82","endLine":7,"endColumn":22},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'Client' is defined but never used.","'Server' is defined but never used.","'Game' is defined but never used.","'react' is defined but never used.","'UpwardMobilityBoard' is defined but never used.","'itemsArray' is defined but never used.","'buffsArray' is defined but never used.","'currPlayToken' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'tempPosition' is assigned a value but never used.","'Component' is defined but never used.","'Popup' is defined but never used.","'dice' is defined but never used.","'playerList' is defined but never used.","'gamelogo' is defined but never used.","'moveDist' is defined but never used.","'eventsArray' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPlayerName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [G.players] as a second argument to the useEffect Hook.",["126"],"React Hook useEffect contains a call to 'setPlay1Name'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [G.players] as a second argument to the useEffect Hook.",["127"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Assignments to the 'alreadyGen' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'handleAnswerSelect' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getEventResult' is assigned a value but never used.","'UpwardsMobility' is defined but never used.","'pixelCat' is defined but never used.","'usbDrive' is defined but never used.","'windowsError' is defined but never used.","'alleyMan' is defined but never used.","'buriedTreasure' is defined but never used.",{"desc":"128","fix":"129"},{"desc":"128","fix":"130"},"Add dependencies array: [G.players]",{"range":"131","text":"132"},{"range":"133","text":"132"},[1497,1497],", [G.players]",[2305,2305]]