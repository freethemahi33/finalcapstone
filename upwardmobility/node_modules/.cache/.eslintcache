[{"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/eventsfile.js":"1","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Board.js":"2","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Game.js":"3"},{"size":5905,"mtime":1680627527797,"results":"4","hashOfConfig":"5"},{"size":14015,"mtime":1680631675885,"results":"6","hashOfConfig":"5"},{"size":12471,"mtime":1680631615425,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11","usedDeprecatedRules":"12"},"10ybc25",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/eventsfile.js",["20","21","22","23","24"],[],"import { UpwardsMobility } from \"./Game\";\nimport montyPythonImage from \"./monypython.png\";\nimport pixelCat from \"./pixelcat.png\";\nimport usbDrive from \"./usbdriveonroad.png\";\nimport windowsError from \"./windowserror.jpg\";\nimport alleyMan from \"./alleyman.jpg\";\nimport buriedTreasure from \"./buriedtreasure.avif\";\nexport const eventsArray = [\n    {\n        id: 1,\n        description: \"A mysterious raggedy wizard appears before you and asks the question... 'What is the airspeed velocity of an unladen swallow?'\",\n        options: [\n            \"What do you mean? African or European swallow?\",\n            \"I don't know that!\",\n            \"What is an unladen swallow?\"\n        ],\n        results: [\n            \"The wizard has dropped his staff of Mo Money which you pick up and is added to your inventory.\",\n            \"incorrect answer for option 2\",\n            \"incorrect answer for opetion 3\",\n            ],\n        correctAnswer: 0,\n        image: montyPythonImage,\n        // item: { name: \"Staff of MoMoney\", description: \"staff of mo money description\" }\n        eventReward: {\n            type: \"item\",\n            description: \"The wizard has dropped his staff of Mo Money which you pick up and is added to your inventory.\",\n            item: { name: \"Staff of MoMoney\", image: \"\", description: \"staff of mo money description\", onUse: \"You use the staff of Mo Money and randomly generate between 0 and 10 currency\"}\n        }\n    },\n    {\n        id: 2,\n        description: \"You stumble upon a treasure chest buried in the ground.\",\n        options: [\n            \"Open the chest\",\n            \"Leave the chest alone\",\n            \"Kick the chest\"\n        ],\n        image: buriedTreasure,\n        // onCorrect: \"You find a 20 currency and add it to your wallet!\",\n        results: [\n            \"You have opened the chest and find some money\",\n            \"You have left the chest alone. Bad idea. You die.  \",\n            \"You break your foot. You skip your next 3 turns. \",\n            ],\n        correctAnswer: 0,\n        eventReward: {\n            type: \"buff\",\n            description: \"You gain the buff of mo money where you gain 2 currency for your next 3 rolls.\",\n            buff: { name: \"Buff of Mo Money\", image: \"\", description: \"buff of mo money description\", duration: 3 }\n        }\n    },\n    // {\n    //     id: 3,\n    //     description: \"Event 3\",\n    //     options: [\n    //         \"Not answer\",\n    //         \"Answer\",\n    //         \"Not Answer\"\n    //     ],\n    //     image: \"\",\n    //     onCorrect: \"Good thing happens\",\n    //     onIncorrect: \"Bad thing happens\",\n    //     correctAnswer: 1,\n    //     eventReward: {\n    //         type: \"buff\",\n    //         description: \"You gain the buff or good things happening where good things happen for your next 5 rolls.\",\n    //         buff: { name: \"Buff of Mo Money\", description: \"buff of mo money description\", duration: 5 }\n    //     }\n    // },\n    // {\n    //     id: 4,\n    //     description: \"You find a cat.\",\n    //     options: [\n    //         \"Pet the cat\",\n    //         \"you do something\",\n    //         \"you do something else\"\n    //     ],\n    //     image: pixelCat,\n    //     onCorrect: \"The cat is happy and gives you 2 coins\",\n    //     onIncorrect: \"The cat becomes violently angry and attacks you, stealing 3 coins\",\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //         type: \"The cat also gives you something cool\",\n    //         description: \"The cat also gives you something cool and you add it to your inventory.\",\n    //         item: { name: \"Cat item\", description: \"description for cat item\" }\n    //     }\n    // },\n    // {\n    //     id: 5,\n    //     description: \"You come across a shady looking man in a dark alley... \\n \\\"You look like someone with a good eye, stranger. You lookin' to buy?\\\" \",\n    //     options: [\n    //         \"Buy item 1 ($x)\",\n    //         \"Buy item 2 ($y)\",\n    //         \"Buy item 3 ($z)\"\n    //     ],\n    //     image: alleyMan,\n    //     onCorrect: \"The cat is happy and gives you 2 coins\",\n    //     onIncorrect: \"The cat becomes violently angry and attacks you, stealing 3 coins\",\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //         type: \"The cat also gives you something cool\",\n    //         description: \"The cat also gives you something cool and you add it to your inventory.\",\n    //         item: { name: \"Cat item\", description: \"description for cat item\" }\n    //     }\n    // },\n    // {\n    //     id: 6,\n    //     description: \"Your free trial of \\\"LifeOS\\\" has ended.\",\n    //     options: [\n    //         \"Buy License\",\n    //         \"Cancel\"\n    //     ],\n    //     image: windowsError,\n    //     onCorrect: \"I'm sure it'll be fine\",\n    //     onIncorrect: \"You payed $x for a license, hopefully that's the end of it\", //subract $x\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //\n    //     }\n    // },\n    // {\n    //     id: 7,\n    //     description: \"You find an abandoned USB drive on the side of the road.\",\n    //     options: [\n    //         \"Leave it\",\n    //         \"Let's see what's inside\"\n    //     ],\n    //     image: usbDrive,\n    //     onCorrect: \"Good idea, that's really unsafe\",\n    //     onIncorrect: \"What did you think was going to happen?\", //Idk man, just really fuck their shit up\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //\n    //     }\n    // },\n    // {\n    //     id: 8,\n    //     description: \"You find an abandoned USB drive on the side of the road.\",\n    //     options: [\n    //         \"Leave it\",\n    //         \"Let's see what's inside\"\n    //     ],\n    //     image: usbDrive,\n    //     onCorrect: \"Good idea, that's really unsafe\",\n    //     onIncorrect: \"What did you think was going to happen?\",\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //\n    //     }\n    // },\n\n];\n",[],"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Board.js",["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48"],[],"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Game.js",["49","50","51","52","53","54","55","56","57","58"],[],"import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\nimport montyPythonImage from \"./monypython.png\";\n\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nimport {eventsArray, itemsArray, buffsArray} from \"./eventsfile\";\nexport const UpwardsMobility = {\n\n    // Turn phase flow\n    // 1) Roll dice move piece\n    // 2) Choose event or use item\n    // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n    // if correct answer than they pick up item and or gain currency then end turn\n    // if incorrect answer than negativeness happens then end turn\n    // 3b) If they choose the item, activate the item and do item thing and then show event\n\n    // rollScreen\n    // eventOrItemScreen\n    // itemScreen\n    // eventScreen\n    // correctAnswerScreen\n    // wrongAnswerScreen\n    // endTurnScreen\n\n    setup: () => ({\n        players: {\n            0: {\n                position: 0,\n                inventory: [\n                    { name: \"Staff of MoMoney\", image: montyPythonImage, description: \"item 1 description\", onUse: \"You randomly generate between 0 and 10 coins\" },\n                    { name: \"Staff of NoMoney\", image: montyPythonImage, description: \"item 2 description\", onUse: \"You randomly lose between 0 and 10 coins\" },\n                    { name: \"Orb of MoMoney\", image: montyPythonImage, description: \"item 3 description\", onUse: \"You gain the buff of MoMoney for 3 turns.\" }\n                ],\n                buffs: [],\n                currency: 0,\n                jobTitle: \"Starting job title\",\n                jobTitleDescription: \"Starting job description\",\n                selectedOption: -1,\n\n            },\n            1: {\n                position: 0,\n                inventory: [\n                    { name: \"Staff of MoMoney\", image: montyPythonImage, description: \"item 1 description\", onUse: \"You randomly generate between 0 and 10 coins\" },\n                    { name: \"Staff of NoMoney\", image: montyPythonImage, description: \"item 2 description\", onUse: \"You randomly lose between 0 and 10 coins\" },\n                    { name: \"Orb of MoMoney\", image: montyPythonImage, description: \"item 3 description\", onUse: \"You gain the buff of MoMoney for 3 turns.\" }\n                ],\n                buffs: [],\n                currency: 0,\n                jobTitle: \"Starting job title\",\n                jobTitleDescription: \"Starting job title description\",\n                selectedOption: -1,\n\n            },\n            moveDist: 0,\n        },\n\n        jobTitles: [\n            {name: \"job title 1\", description: \"description for job title 1\", previouslyHeldBy: []},\n            {name: \"job title 2\", description: \"description for job title 2\", previouslyHeldBy: []},\n            {name: \"job title 3\", description: \"description for job title 3\", previouslyHeldBy: []},\n            {name: \"job title 4\", description: \"description for job title 4\", previouslyHeldBy: []},\n    ],\n\n        currentEvent: null,\n\n        board: {\n            0: { currency: 0 },\n            1: { currency: 2 },\n            2: { currency: 2 },\n            3: { currency: -1 },\n            4: { currency: 3 },\n            5: { currency: 5, },\n            6: { currency: 1 },\n            7: { currency: 0 },\n            8: { currency: 0 },\n            9: { currency: -2 },\n            10: { currency: 0 },\n            11: { currency: 0 },\n            12: { currency: 2 },\n            13: { currency: 2 },\n            14: { currency: -1 },\n            15: { currency: 3 },\n            16: { currency: -2 },\n            17: { currency: 1 },\n            18: { currency: 2 },\n            19: { currency: 0 },\n            20: { currency: -2 },\n            21: { currency: 2 },\n            22: { currency: -2 },\n            23: { currency: -2 },\n            24: { currency: 0 },\n            25: { currency: 0 },\n        },\n\n\n    }),\n    turn: {\n        order: TurnOrder.CONTINUE,\n    },\n\n    // Define the moves for rolling the dice and updating the game state.\n    moves: {\n        rollDice: ({G, ctx, events}) => {\n            const die1 = Math.floor(Math.random() * 6) + 1;\n            const die2 = Math.floor(Math.random() * 6) + 1;\n            let moveDist = die1 + die2;\n            G.moveDist = moveDist;\n            G.players[ctx.currentPlayer].position += moveDist;\n\n            let getId = \"playerToken\" + ctx.currentPlayer\n            let currPlayToken = document.getElementById(getId)\n            // console.log(document.getElementById(\"playerToken\" + ctx.currentPlayer).style.top)\n            let calc = (parseInt(document.getElementById(getId).style.top.toString().substring(0,2)))\n            let disCalc = calc - (calc * (.025 * moveDist))\n            disCalc = disCalc + \"%\"\n            document.getElementById(getId).style.top = disCalc\n\n            console.log(\"Player position: \" + G.players[ctx.currentPlayer].position)\n\n\n\n            const player = G.players[ctx.currentPlayer];\n            if (player.position >= 10 && player.position <= 20) {\n                console.log(\"Inside of job title check 10 - 20. Player position: \" + player.position)\n                // Choose a random job title from the list that the player has not held before\n                let availableJobTitles = G.jobTitles.filter((jobTitle) => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\n                if (availableJobTitles.length === 0) {\n                    availableJobTitles = G.jobTitles;\n                }\n                const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\n                const jobTitle = availableJobTitles[jobTitleIndex];\n                player.jobTitle = jobTitle.name;\n                player.jobTitleDescription = jobTitle.description;\n                jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\n            }\n            if (player.position >= 20 && player.position <= 30) {\n                console.log(\"Inside of job title check 20 - 30. Player position: \" + player.position)\n                let availableJobTitles = G.jobTitles.filter((jobTitle) => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\n                if (availableJobTitles.length === 0) {\n                    availableJobTitles = G.jobTitles;\n                }\n                const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\n                const jobTitle = availableJobTitles[jobTitleIndex];\n                player.jobTitle = jobTitle.name;\n                player.jobTitleDescription = jobTitle.description;\n                jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\n            }\n            if (player.position >= 30 && player.position <= 40) {\n                console.log(\"Inside of job title check 30 - 40. Player position: \" + player.position)\n                let availableJobTitles = G.jobTitles.filter((jobTitle) => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\n                if (availableJobTitles.length === 0) {\n                    availableJobTitles = G.jobTitles;\n                }\n                const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\n                const jobTitle = availableJobTitles[jobTitleIndex];\n                player.jobTitle = jobTitle.name;\n                player.jobTitleDescription = jobTitle.description;\n                jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\n            }\n            if (player.position >= 40 && player.position <= 50) {\n                console.log(\"Inside of job title check 40 - 50. Player position: \" + player.position)\n                let availableJobTitles = G.jobTitles.filter((jobTitle) => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\n                if (availableJobTitles.length === 0) {\n                    availableJobTitles = G.jobTitles;\n                }\n                const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\n                const jobTitle = availableJobTitles[jobTitleIndex];\n                player.jobTitle = jobTitle.name;\n                player.jobTitleDescription = jobTitle.description;\n                jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\n            }\n\n            console.log(\"Current player job title : \" + G.players[ctx.currentPlayer].jobTitle)\n\n            // Check for players active buffs\n            // G.players[ctx.currentPlayer].buffs.forEach((buff) => {\n            //     if (buff.type === \"moMoneyBuff\") {\n            //         moveDist += 1;\n            //         buff.duration--;\n            //         if (buff.duration === 0) {\n            //             G.players[ctx.currentPlayer].buffs.splice(\n            //                 G.players[ctx.currentPlayer].buffs.indexOf(buff),\n            //                 1\n            //             );\n            //         }\n            //     }\n            // });\n\n\n            G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\n                switch (buff.name) {\n                    case \"Buff of Mo Money\":\n                        G.players[ctx.currentPlayer].currency += 2;\n                        buff.duration--;\n\n                        if (buff.duration === 0) {\n                            G.players[ctx.currentPlayer].buffs.splice(index, 1);\n                        }\n                        break;\n                }\n            });\n\n            // G.currentEvent = eventsArray[Math.floor(Math.random() * eventsArray.length)];\n            G.currentEvent = eventsArray[Math.floor(Math.random() * 2)];\n\n            console.log(\"current event reward type: \", G.currentEvent.eventReward.type)\n\n            events.setPhase(\"eventOrItemScreen\");\n        },\n\n        addCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency += currency;\n        },\n\n        loseCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency -= currency;\n        },\n\n        moveForward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position += moveDist;\n        },\n\n        moveBackward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position -= moveDist;\n        },\n\n        selectAnswer({G, ctx}, answerIndex) {\n            G.players[ctx.currentPlayer].selectedOption = answerIndex;\n        },\n\n        pickUpItem: ({G, ctx, events}, name) => {\n            // const itemCell = G.board[G.players[ctx.currentPlayer].position];\n            // const itemRef = itemCell.item;\n\n            // G.players[ctx.currentPlayer].inventory.push(itemsArray[id]);\n\n            if (G.currentEvent.eventReward.type === \"item\") {\n                G.players[ctx.currentPlayer].inventory.push(G.currentEvent.eventReward.item.name);\n            }\n            if (G.currentEvent.eventReward.type === \"buff\") {\n                G.players[ctx.currentPlayer].buffs.push(G.currentEvent.eventReward.buff);\n            }\n\n        },\n\n        // use item function\n\n        useItem: ({G, ctx, events}, item) => {\n\n            console.log(\"use item function\");\n\n            switch (item) {\n                case \"Staff of MoMoney\":\n                    G.players[ctx.currentPlayer].currency += Math.random() * 5;\n                    break;\n                case \"Staff of NoMoney\":\n                    G.players[ctx.currentPlayer].currency -= Math.random() * 5;\n                    break;\n                case \"Orb of MoMoney\":\n                    G.players[ctx.currentPlayer].buffs.push({name: \"Buff of Mo Money\", duration: 3});\n                    break;\n            }\n\n\n            const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n            G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n\n        },\n\n        // apply buff function\n\n        applyBuff: ({ G, ctx }, playerId, buffType, duration) => {\n            G.players[ctx.currentPlayer].buffs.push({ type: buffType, duration: duration });\n        },\n\n    },\n    phases: {\n        rollScreen: {\n            start: true\n        },\n        eventOrItemScreen: {\n\n        },\n        useItemScreen: {\n\n        },\n        eventScreen: {\n\n        },\n        correctAnswerScreen: {\n\n        },\n        wrongAnswerScreen: {\n\n        },\n        endTurnScreen: {\n\n        },\n        pickUpItemScreen: {\n\n        },\n        itemEffectResultScreen: {\n\n        },\n        useItemOnPlayerScreen: {\n\n        },\n        winngingScreen: {\n\n        }\n    },\n}",{"ruleId":"59","severity":1,"message":"60","line":1,"column":10,"nodeType":"61","messageId":"62","endLine":1,"endColumn":25},{"ruleId":"59","severity":1,"message":"63","line":3,"column":8,"nodeType":"61","messageId":"62","endLine":3,"endColumn":16},{"ruleId":"59","severity":1,"message":"64","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":16},{"ruleId":"59","severity":1,"message":"65","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":20},{"ruleId":"59","severity":1,"message":"66","line":6,"column":8,"nodeType":"61","messageId":"62","endLine":6,"endColumn":16},{"ruleId":"59","severity":1,"message":"67","line":1,"column":16,"nodeType":"61","messageId":"62","endLine":1,"endColumn":25},{"ruleId":"59","severity":1,"message":"68","line":6,"column":8,"nodeType":"61","messageId":"62","endLine":6,"endColumn":12},{"ruleId":"59","severity":1,"message":"69","line":7,"column":8,"nodeType":"61","messageId":"62","endLine":7,"endColumn":18},{"ruleId":"59","severity":1,"message":"70","line":8,"column":8,"nodeType":"61","messageId":"62","endLine":8,"endColumn":16},{"ruleId":"59","severity":1,"message":"71","line":9,"column":10,"nodeType":"61","messageId":"62","endLine":9,"endColumn":18},{"ruleId":"59","severity":1,"message":"72","line":10,"column":10,"nodeType":"61","messageId":"62","endLine":10,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":28,"column":26,"nodeType":"75","messageId":"76","endLine":28,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":30,"column":26,"nodeType":"75","messageId":"76","endLine":30,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":32,"column":26,"nodeType":"75","messageId":"76","endLine":32,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":34,"column":26,"nodeType":"75","messageId":"76","endLine":34,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":36,"column":26,"nodeType":"75","messageId":"76","endLine":36,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":38,"column":26,"nodeType":"75","messageId":"76","endLine":38,"endColumn":28},{"ruleId":"77","severity":1,"message":"78","line":44,"column":26,"nodeType":"79","endLine":44,"endColumn":30},{"ruleId":"59","severity":1,"message":"80","line":48,"column":12,"nodeType":"61","messageId":"62","endLine":48,"endColumn":25},{"ruleId":"59","severity":1,"message":"81","line":48,"column":27,"nodeType":"61","messageId":"62","endLine":48,"endColumn":43},{"ruleId":"59","severity":1,"message":"82","line":53,"column":11,"nodeType":"61","messageId":"62","endLine":53,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":66,"column":17,"nodeType":"85","endLine":66,"endColumn":109},{"ruleId":"86","severity":1,"message":"87","line":72,"column":5,"nodeType":"88","messageId":"89","endLine":234,"endColumn":6},{"ruleId":"83","severity":1,"message":"84","line":77,"column":21,"nodeType":"85","endLine":77,"endColumn":191},{"ruleId":"83","severity":1,"message":"84","line":106,"column":25,"nodeType":"85","endLine":106,"endColumn":98},{"ruleId":"83","severity":1,"message":"84","line":247,"column":13,"nodeType":"85","endLine":247,"endColumn":147},{"ruleId":"83","severity":1,"message":"84","line":253,"column":13,"nodeType":"85","endLine":253,"endColumn":129},{"ruleId":"83","severity":1,"message":"84","line":324,"column":13,"nodeType":"85","endLine":324,"endColumn":133},{"ruleId":"83","severity":1,"message":"84","line":325,"column":13,"nodeType":"85","endLine":325,"endColumn":143},{"ruleId":"59","severity":1,"message":"90","line":1,"column":21,"nodeType":"61","messageId":"62","endLine":1,"endColumn":27},{"ruleId":"59","severity":1,"message":"91","line":1,"column":29,"nodeType":"61","messageId":"62","endLine":1,"endColumn":35},{"ruleId":"59","severity":1,"message":"92","line":1,"column":37,"nodeType":"61","messageId":"62","endLine":1,"endColumn":41},{"ruleId":"59","severity":1,"message":"93","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":13},{"ruleId":"59","severity":1,"message":"94","line":3,"column":10,"nodeType":"61","messageId":"62","endLine":3,"endColumn":29},{"ruleId":"59","severity":1,"message":"95","line":4,"column":22,"nodeType":"61","messageId":"62","endLine":4,"endColumn":32},{"ruleId":"59","severity":1,"message":"96","line":4,"column":34,"nodeType":"61","messageId":"62","endLine":4,"endColumn":44},{"ruleId":"59","severity":1,"message":"97","line":110,"column":17,"nodeType":"61","messageId":"62","endLine":110,"endColumn":30},{"ruleId":"86","severity":1,"message":"87","line":190,"column":17,"nodeType":"88","messageId":"89","endLine":199,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":251,"column":13,"nodeType":"88","messageId":"89","endLine":261,"endColumn":14},"no-unused-vars","'UpwardsMobility' is defined but never used.","Identifier","unusedVar","'pixelCat' is defined but never used.","'usbDrive' is defined but never used.","'windowsError' is defined but never used.","'alleyMan' is defined but never used.","'Component' is defined but never used.","'dice' is defined but never used.","'playerList' is defined but never used.","'gamelogo' is defined but never used.","'moveDist' is defined but never used.","'eventsArray' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Assignments to the 'alreadyGen' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'timeRemaining' is assigned a value but never used.","'setTimeRemaining' is assigned a value but never used.","'handleAnswerSelect' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Client' is defined but never used.","'Server' is defined but never used.","'Game' is defined but never used.","'react' is defined but never used.","'UpwardMobilityBoard' is defined but never used.","'itemsArray' is defined but never used.","'buffsArray' is defined but never used.","'currPlayToken' is assigned a value but never used."]