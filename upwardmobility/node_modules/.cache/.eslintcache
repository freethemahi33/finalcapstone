[{"C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\index.js":"1","C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\App.js":"2","C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\reportWebVitals.js":"3","C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\Board.js":"4","C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\Game.js":"5","C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\eventsfile.js":"6"},{"size":552,"mtime":1680554269481,"results":"7","hashOfConfig":"8"},{"size":355,"mtime":1680554269471,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1680554269483,"results":"10","hashOfConfig":"8"},{"size":12753,"mtime":1680555776739,"results":"11","hashOfConfig":"8"},{"size":7348,"mtime":1680555737766,"results":"12","hashOfConfig":"8"},{"size":5584,"mtime":1680570075376,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ydycpw",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\index.js",[],[],"C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\App.js",["34","35"],[],"C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\reportWebVitals.js",[],[],"C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\Board.js",["36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54"],[],"import React, {Component, useEffect, useState} from 'react'\r\nimport { Dropdown } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nimport dice from './GameDieBigpng.png'\r\nimport playerList from './PlayerListBackground.png'\r\nimport gamelogo from './Upward_Mobility_big.png'\r\nimport { moveDist } from \"./Game\";\r\nimport { eventsArray} from \"./eventsfile\";\r\n\r\n// console.log(\"Events array: \" + eventsArray)\r\n\r\nexport function UpwardMobilityBoard ({ctx, G, moves, events, eventsArray}){\r\n    let alreadyGen = false;\r\n    useEffect(() => {\r\n        console.log(\"testing useEffect\")\r\n    }, );\r\n\r\n\r\n    useEffect(() => {\r\n        if(alreadyGen === false){\r\n            for(let i = 0; i< 2; i++){\r\n                if(G.players[i] !== undefined){\r\n                    let playerToken = document.createElement(\"div\")\r\n                    playerToken.setAttribute(\"id\", \"playerToken\" + i);\r\n                    playerToken.setAttribute(\"class\", \"playerToken\")\r\n                    playerToken.style.top = \"93%\"\r\n                    if(i ==0)\r\n                        playerToken.style.backgroundColor = \"rgba(234,0,217,1)\"\r\n                    if(i ==1)\r\n                        playerToken.style.backgroundColor = \"rgba(115,248,255,1)\"\r\n                    if(i == 2)\r\n                        playerToken.style.backgroundColor = \"rgba(0,201,60,1)\"\r\n                    if(i == 3)\r\n                        playerToken.style.backgroundColor = \"rgba(196,0,0,1)\"\r\n                    if(i == 4)\r\n                        playerToken.style.backgroundColor = \"rgba(105,0,225,1)\"\r\n                    if(i == 5)\r\n                        playerToken.style.backgroundColor = \"rgba(0,61,204,1)\"\r\n\r\n                    document.getElementById(\"progressionDiv\").append(playerToken)\r\n                }\r\n            }\r\n            alreadyGen = true;\r\n        }\r\n    })\r\n\r\n\r\n    const { moveDist } = G;\r\n\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n    let eventScreenContents = \"\";\r\n\r\n    switch (ctx.phase) {\r\n        case \"rollScreen\":\r\n            eventScreenContents = (\r\n                <div>\r\n                    <button onClick = {() => moves.rollDice()}  className=\"DiceButton\" id=\"DiceButton\"></button>\r\n                    <img  onClick = {() => moves.rollDice()} className=\"DiceImage\" id=\"NoPath_-_Copy_8\" src=\"NoPath_-_Copy_8.png\" srcSet=\"NoPath_-_Copy_8.png 1x, NoPath_-_Copy_8@2x.png 2x\"/>\r\n                    <div id=\"A_pair_of_strange_dice_lay_bef\">\r\n                        A pair of strange dice lay before you...\r\n                    </div>\r\n                </div>\r\n            )\r\n            if (G.players[ctx.currentPlayer].position === 25) {\r\n                ctx.phase = \"winningGameScreen\";\r\n                G.winningPlayer = ctx.currentPlayer;\r\n            }\r\n            break;\r\n        case \"eventOrItemScreen\":\r\n            eventScreenContents = (\r\n                <div>\r\n                    <span id=\"rollVal\" className=\"inGameText\"> Player {ctx.currentPlayer + 1} rolls a {moveDist} landing on cell {G.players[ctx.currentPlayer].position}</span>\r\n                    <button onClick={() => events.setPhase(\"eventScreen\")} className=\"inGameButton\" id=\"showEventButton\">Show Event</button>\r\n                    <button onClick={() => events.setPhase(\"useItemScreen\")} className=\"inGameButton\" id=\"use-item-button\">Use Item</button>\r\n                </div>\r\n            )\r\n            break;\r\n        case \"eventScreen\":\r\n            // console.log(\"This is current event state description: \" + currentEvent.description)\r\n            // let randInt = Math.floor(Math.random() * eventsArray.length);\r\n            // let currentEvent = eventsArray[randInt];\r\n\r\n            eventScreenContents = (\r\n                <div>\r\n                    <div>\r\n                        <span className=\"inGameText\">{G.currentEvent.description}</span>\r\n                    </div>\r\n                    <div className=\"event-button-container\">\r\n                        {G.currentEvent.options && G.currentEvent.options.map((option, index) => (\r\n                            <button key={index} onClick={() => {\r\n                                if (index === G.currentEvent.correctAnswer) {\r\n                                    moves.addCurrency(2);\r\n                                    events.setPhase(\"pickUpItemScreen\");\r\n                                    // {console.log(\"Current event: \" + G.currentEvent)}\r\n                                } else {\r\n                                    moves.moveBackward(3);\r\n                                    events.setPhase(\"wrongAnswerScreen\");\r\n                                }\r\n                            }} className=\"answerButton\">{option}</button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )\r\n            break;\r\n\r\n        case \"useItemScreen\":\r\n            eventScreenContents = (\r\n                <div>\r\n                    <span className=\"inGameText\">This is the use item screen</span>\r\n                    <div className=\"dropdown-container\">\r\n                        <Dropdown onSelect={(key) => setSelectedItem(G.players[ctx.currentPlayer].inventory[key])}>\r\n                            <Dropdown.Toggle variant=\"success\">\r\n                                {selectedItem ? selectedItem.name : \"Select Item\"}\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                {G.players[ctx.currentPlayer].inventory && G.players[ctx.currentPlayer].inventory.map((item, index) => (\r\n                                    <Dropdown.Item key={index} eventKey={index}>\r\n                                        {item.name}\r\n                                    </Dropdown.Item>\r\n                                ))}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n\r\n                    </div>\r\n                    <button\r\n                        className=\"inGameButton\" id=\"use-item-button-fromscreen\"\r\n                        onClick={() => {\r\n                            if (selectedItem) {\r\n                                moves.useItem(selectedItem.name);\r\n                            }\r\n                            events.setPhase(\"eventOrItemScreen\");\r\n                        }}\r\n                    >\r\n                        Use Item\r\n                    </button>\r\n\r\n                    <button\r\n                        className=\"inGameButton\" id=\"cancel-item-button\"\r\n                        onClick={() => events.setPhase(\"eventOrItemScreen\")}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            );\r\n            break;\r\n\r\n\r\n\r\n\r\n        case \"correctAnswerScreen\":\r\n            eventScreenContents = (\r\n                <div>\r\n                    <span className=\"inGameText\">Correct Answer Screen{G.currentEvent.onCorrect}</span>\r\n                    <div className=\"event-button-container\">\r\n                        <button onClick={() => events.setPhase(\"pickUpItemScreen\")} className=\"answerButton\">Pick Up Item</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n            break;\r\n\r\n        case \"pickUpItemScreen\":\r\n            // console.log(\"Current event from pick up item screen: \" + G.currentEvent.onCorrect);\r\n\r\n            eventScreenContents = (\r\n                <div>\r\n                    <span className=\"inGameText\">{G.currentEvent.eventReward.description}</span>\r\n                    <div className=\"event-button-container\">\r\n                        <button onClick={() => { events.setPhase(\"endTurnScreen\") }} className=\"answerButton\">Proceed</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n            break;\r\n\r\n        case \"wrongAnswerScreen\":\r\n            eventScreenContents = (\r\n                <div>\r\n                    <span className=\"inGameText\">{G.currentEvent.onIncorrect}</span>\r\n                    <div className=\"event-button-container\">\r\n                        <button onClick={() => events.setPhase(\"endTurnScreen\")} className=\"answerButton\">End Turn</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n            break;\r\n\r\n        case \"winningGameScreen\":\r\n            eventScreenContents = (\r\n                <div>\r\n                    <span className=\"winningGameText\">Player {ctx.currentPlayer} has won the game.</span>\r\n                </div>\r\n            )\r\n            break;\r\n        case \"endTurnScreen\":\r\n            eventScreenContents = (\r\n                <div>\r\n                    <span className=\"inGameText\">Your turn is over!</span>\r\n                    <div className=\"event-button-container\">\r\n                        <button onClick={() => { events.endTurn(); events.setPhase(\"rollScreen\"); }} className=\"answerButton\">End Turn</button>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            )\r\n            break;\r\n\r\n\r\n    }\r\n\r\n    return(\r\n        <div className=\"GamePage\">\r\n            <div className=\"Rectangle_42\" id = \"eventScreen\">\r\n                {eventScreenContents}\r\n            </div>\r\n\r\n            <div className=\"GameProgression\" id = \"progressionDiv\">\r\n                <rect id=\"GameProgressionMenu\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\r\n                </rect>\r\n            </div>\r\n\r\n            <img id=\"ProgresionImage\" src=\"src/Templates/assets/StartFinishScale.png\" srcSet=\"NoPath_-_Copy_6.png 1x, NoPath_-_Copy_6@2x.png 2x\"/>\r\n\r\n\r\n            {/*Player List*/}\r\n            <svg className=\"GamePlayerBackground\">\r\n            </svg>\r\n            <img id=\"NoPath_-_Copy_10\" src=\"NoPath_-_Copy_10.png\" srcSet=\"NoPath_-_Copy_10.png 1x, NoPath_-_Copy_10@2x.png 2x\"/>\r\n\r\n            <svg className=\"GamePlayer_1\">\r\n                <ellipse id=\"GamePlayer_1\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\">\r\n                </ellipse>\r\n            </svg>\r\n            <svg className=\"GamePlayer_2\">\r\n                <ellipse id=\"GamePlayer_2\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\">\r\n                </ellipse>\r\n            </svg>\r\n            <svg className=\"GamePlayer_3\">\r\n                <ellipse id=\"GamePlayer_3\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\">\r\n                </ellipse>\r\n            </svg>\r\n            <svg className=\"GamePlayer_4\">\r\n                <ellipse id=\"GamePlayer_4\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\">\r\n                </ellipse>\r\n            </svg>\r\n            <svg className=\"GamePlayer_5\">\r\n                <ellipse id=\"GamePlayer_5\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\">\r\n                </ellipse>\r\n            </svg>\r\n            <svg className=\"GamePlayer_6\">\r\n                <ellipse id=\"GamePlayer_6\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\">\r\n                </ellipse>\r\n            </svg>\r\n            {/*Player List*/}\r\n\r\n\r\n            {/*Inventory List*/}\r\n            <div className=\"Inventory\">\r\n                <rect id=\"Inventory\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\r\n                </rect>\r\n            </div>\r\n            <svg className=\"InventoryLabel\">\r\n                <rect id=\"InventoryLabel\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\r\n                </rect>\r\n            </svg>\r\n\r\n            <div id=\"Inventory_Label_Word\">\r\n                Inventory\r\n            </div>\r\n            {/*Inventory List*/}\r\n\r\n\r\n            {/*Chat List*/}\r\n            <div className=\"ChatAndLogo\">\r\n                <rect id=\"ChatAndLogo\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\"></rect>\r\n                <div id=\"chatSection\"></div>\r\n            </div>\r\n            <input className=\"chatBox\" type=\"text\" placeholder=\"Type here to chat\" id=\"chatBox\" rx=\"7\" ry=\"7\" x=\"0\" y=\"0\" />\r\n\r\n            <div id=\"Type_here_to_chat\">\r\n                <span>Type here to chat...</span>\r\n            </div>\r\n            {/*Chat List*/}\r\n\r\n\r\n            {/*Player Stat List*/}\r\n            <svg className=\"PlayerStatsBackground\">\r\n                <rect id=\"PlayerStatsBackground\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\r\n                </rect>\r\n\r\n            </svg>\r\n            <div className=\"PlayerName\" id=\"PlayerName\">\r\n                TempName\r\n            </div>\r\n            <div className=\"PlayerJobTitle\" id=\"PlayerJobTitle\">\r\n                TempJobTitle\r\n            </div>\r\n            <img className=\"PlayerBuffsIcon\" id=\"PlayerBuffsIcon\" src=\"BuffIcon.png\" srcSet=\"BuffIcon.png 1x, BuffIcon.png.png 2x\"/>\r\n            <img className=\"PlayerDebuffsIcon\" id=\"PlayerDebuffsIcon\" src=\"DebuffIcon.png\" srcSet=\"DebuffIcon.png 1x, DebuffIcon.png.png 2x\"/>\r\n            <div className=\"PlayerCurrency\" id=\"PlayerCurrency\">\r\n                $12345\r\n            </div>\r\n            <div className=\"PlayerIncome\" id=\"PlayerIncome\">\r\n                +$2000 in 2 turns\r\n            </div>\r\n            {/*Player Stat List*/}\r\n        </div>\r\n    )\r\n}","C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\Game.js",["55","56","57","58","59","60","61","62","63","64"],[],"import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\r\nimport react from 'react';\r\nimport { UpwardMobilityBoard } from \"./Board\";\r\nimport {eventsArray, itemsArray, buffsArray} from \"./eventsfile\";\r\nexport const UpwardsMobility = {\r\n\r\n    // Turn phase flow\r\n    // 1) Roll dice move piece\r\n    // 2) Choose event or use item\r\n    // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\r\n    // if correct answer than they pick up item and or gain currency then end turn\r\n    // if incorrect answer than negativeness happens then end turn\r\n    // 3b) If they choose the item, activate the item and do item thing and then show event\r\n\r\n    // rollScreen\r\n    // eventOrItemScreen\r\n    // itemScreen\r\n    // eventScreen\r\n    // correctAnswerScreen\r\n    // wrongAnswerScreen\r\n    // endTurnScreen\r\n\r\n    setup: () => ({\r\n        players: {\r\n            0: {\r\n                position: 0,\r\n                inventory: [\r\n                    { name: \"item 1\", image: \"\", description: \"item 1 description\" },\r\n                    { name: \"item 2\", image: \"\", description: \"item 2 description\" },\r\n                    { name: \"item 3\", image: \"\", description: \"item 3 description\" }\r\n                ],\r\n                buffs: [],\r\n                currency: 0,\r\n            },\r\n            1: {\r\n                position: 0,\r\n                inventory: [\r\n                    { name: \"item 4\", image: \"\", description: \"item 4 description\" },\r\n                    { name: \"item 5\", image: \"\", description: \"item 5 description\" },\r\n                    { name: \"item 6\", image: \"\", description: \"item 6 description\" }\r\n                ],\r\n                buffs: [],\r\n                currency: 0,\r\n            },\r\n            moveDist: 0,\r\n        },\r\n\r\n        currentEvent: null,\r\n\r\n        board: {\r\n            0: { currency: 0 },\r\n            1: { currency: 2 },\r\n            2: { currency: 2 },\r\n            3: { currency: -1 },\r\n            4: { currency: 3 },\r\n            5: { currency: 5, },\r\n            6: { currency: 1 },\r\n            7: { currency: 0 },\r\n            8: { currency: 0 },\r\n            9: { currency: -2 },\r\n            10: { currency: 0 },\r\n            11: { currency: 0 },\r\n            12: { currency: 2 },\r\n            13: { currency: 2 },\r\n            14: { currency: -1 },\r\n            15: { currency: 3 },\r\n            16: { currency: -2 },\r\n            17: { currency: 1 },\r\n            18: { currency: 2 },\r\n            19: { currency: 0 },\r\n            20: { currency: -2 },\r\n            21: { currency: 2 },\r\n            22: { currency: -2 },\r\n            23: { currency: -2 },\r\n            24: { currency: 0 },\r\n            25: { currency: 0 },\r\n        },\r\n\r\n\r\n    }),\r\n    turn: {\r\n        order: TurnOrder.CONTINUE,\r\n    },\r\n\r\n    // Define the moves for rolling the dice and updating the game state.\r\n    moves: {\r\n        rollDice: ({G, ctx, events}) => {\r\n            const die1 = Math.floor(Math.random() * 6) + 1;\r\n            const die2 = Math.floor(Math.random() * 6) + 1;\r\n            let moveDist = die1 + die2;\r\n            G.moveDist = moveDist;\r\n            G.players[ctx.currentPlayer].position += moveDist;\r\n\r\n            let getId = \"playerToken\" + ctx.currentPlayer\r\n            let currPlayToken = document.getElementById(getId)\r\n            console.log(document.getElementById(\"playerToken\" + ctx.currentPlayer).style.top)\r\n            let calc = (parseInt(document.getElementById(getId).style.top.toString().substring(0,2)))\r\n            let disCalc = calc - (calc * (.025 * moveDist))\r\n            disCalc = disCalc + \"%\"\r\n            document.getElementById(getId).style.top = disCalc\r\n\r\n\r\n\r\n            // Check for players active buffs\r\n            // G.players[ctx.currentPlayer].buffs.forEach((buff) => {\r\n            //     if (buff.type === \"moMoneyBuff\") {\r\n            //         moveDist += 1;\r\n            //         buff.duration--;\r\n            //         if (buff.duration === 0) {\r\n            //             G.players[ctx.currentPlayer].buffs.splice(\r\n            //                 G.players[ctx.currentPlayer].buffs.indexOf(buff),\r\n            //                 1\r\n            //             );\r\n            //         }\r\n            //     }\r\n            // });\r\n\r\n            G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\r\n                switch (buff.name) {\r\n                    case \"Buff of Mo Money\":\r\n                        G.players[ctx.currentPlayer].currency += 2;\r\n                        buff.duration--;\r\n\r\n                        if (buff.duration === 0) {\r\n                            G.players[ctx.currentPlayer].buffs.splice(index, 1);\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n\r\n            G.currentEvent = eventsArray[Math.floor(Math.random() * eventsArray.length)];\r\n\r\n            console.log(\"current event reward type: \", G.currentEvent.eventReward.type)\r\n\r\n            if (G.currentEvent.eventReward.type === \"item\") {\r\n                G.players[ctx.currentPlayer].inventory.push(G.currentEvent.eventReward.item.name);\r\n            }\r\n            if (G.currentEvent.eventReward.type === \"buff\") {\r\n                G.players[ctx.currentPlayer].buffs.push(G.currentEvent.eventReward.buff);\r\n            }\r\n\r\n            events.setPhase(\"eventOrItemScreen\");\r\n        },\r\n\r\n        addCurrency: ({G, ctx, events}, currency) => {\r\n            G.players[ctx.currentPlayer].currency += currency;\r\n        },\r\n\r\n        loseCurrency: ({G, ctx, events}, currency) => {\r\n            G.players[ctx.currentPlayer].currency -= currency;\r\n        },\r\n\r\n        moveForward: ({G, ctx, events}, moveDist) => {\r\n            G.players[ctx.currentPlayer].position += moveDist;\r\n        },\r\n\r\n        moveBackward: ({G, ctx, events}, moveDist) => {\r\n            G.players[ctx.currentPlayer].position -= moveDist;\r\n        },\r\n\r\n        // pickUpItem: ({G, ctx, events}, id) => {\r\n        //     // const itemCell = G.board[G.players[ctx.currentPlayer].position];\r\n        //     // const itemRef = itemCell.item;\r\n        //\r\n        //     G.players[ctx.currentPlayer].inventory.push(itemsArray[id]);\r\n        //\r\n        // },\r\n\r\n        // use item function\r\n\r\n        useItem: ({G, ctx, events}, item) => {\r\n\r\n            console.log(\"use item function\");\r\n\r\n            switch (item) {\r\n                case \"Staff of MoMoney\":\r\n                    G.players[ctx.currentPlayer].currency += Math.random() * 5;\r\n                    break;\r\n            }\r\n\r\n            const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\r\n            G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\r\n\r\n        },\r\n\r\n        // apply buff function\r\n\r\n        applyBuff: ({ G, ctx }, playerId, buffType, duration) => {\r\n            G.players[ctx.currentPlayer].buffs.push({ type: buffType, duration: duration });\r\n        },\r\n\r\n    },\r\n    phases: {\r\n        rollScreen: {\r\n            start: true\r\n        },\r\n        eventOrItemScreen: {\r\n\r\n        },\r\n        useItemScreen: {\r\n\r\n        },\r\n        eventScreen: {\r\n\r\n        },\r\n        correctAnswerScreen: {\r\n\r\n        },\r\n        wrongAnswerScreen: {\r\n\r\n        },\r\n        endTurnScreen: {\r\n\r\n        },\r\n        pickUpItemScreen: {\r\n\r\n        }\r\n    },\r\n}","C:\\Users\\Justin Neigh\\WebstormProjects\\GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend\\upwardmobility\\src\\eventsfile.js",["65"],[],{"ruleId":"66","severity":1,"message":"67","line":1,"column":8,"nodeType":"68","messageId":"69","endLine":1,"endColumn":12},{"ruleId":"66","severity":1,"message":"70","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":13},{"ruleId":"66","severity":1,"message":"71","line":1,"column":16,"nodeType":"68","messageId":"69","endLine":1,"endColumn":25},{"ruleId":"66","severity":1,"message":"72","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":12},{"ruleId":"66","severity":1,"message":"73","line":7,"column":8,"nodeType":"68","messageId":"69","endLine":7,"endColumn":18},{"ruleId":"66","severity":1,"message":"74","line":8,"column":8,"nodeType":"68","messageId":"69","endLine":8,"endColumn":16},{"ruleId":"66","severity":1,"message":"75","line":9,"column":10,"nodeType":"68","messageId":"69","endLine":9,"endColumn":18},{"ruleId":"66","severity":1,"message":"76","line":10,"column":10,"nodeType":"68","messageId":"69","endLine":10,"endColumn":21},{"ruleId":"77","severity":1,"message":"78","line":29,"column":26,"nodeType":"79","messageId":"80","endLine":29,"endColumn":28},{"ruleId":"77","severity":1,"message":"78","line":31,"column":26,"nodeType":"79","messageId":"80","endLine":31,"endColumn":28},{"ruleId":"77","severity":1,"message":"78","line":33,"column":26,"nodeType":"79","messageId":"80","endLine":33,"endColumn":28},{"ruleId":"77","severity":1,"message":"78","line":35,"column":26,"nodeType":"79","messageId":"80","endLine":35,"endColumn":28},{"ruleId":"77","severity":1,"message":"78","line":37,"column":26,"nodeType":"79","messageId":"80","endLine":37,"endColumn":28},{"ruleId":"77","severity":1,"message":"78","line":39,"column":26,"nodeType":"79","messageId":"80","endLine":39,"endColumn":28},{"ruleId":"81","severity":1,"message":"82","line":45,"column":26,"nodeType":"83","endLine":45,"endColumn":30},{"ruleId":"84","severity":1,"message":"85","line":56,"column":5,"nodeType":"86","messageId":"87","endLine":209,"endColumn":6},{"ruleId":"88","severity":1,"message":"89","line":61,"column":21,"nodeType":"90","endLine":61,"endColumn":191},{"ruleId":"88","severity":1,"message":"89","line":222,"column":13,"nodeType":"90","endLine":222,"endColumn":147},{"ruleId":"88","severity":1,"message":"89","line":228,"column":13,"nodeType":"90","endLine":228,"endColumn":129},{"ruleId":"88","severity":1,"message":"89","line":298,"column":13,"nodeType":"90","endLine":298,"endColumn":133},{"ruleId":"88","severity":1,"message":"89","line":299,"column":13,"nodeType":"90","endLine":299,"endColumn":143},{"ruleId":"66","severity":1,"message":"91","line":1,"column":21,"nodeType":"68","messageId":"69","endLine":1,"endColumn":27},{"ruleId":"66","severity":1,"message":"92","line":1,"column":29,"nodeType":"68","messageId":"69","endLine":1,"endColumn":35},{"ruleId":"66","severity":1,"message":"93","line":1,"column":37,"nodeType":"68","messageId":"69","endLine":1,"endColumn":41},{"ruleId":"66","severity":1,"message":"94","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":13},{"ruleId":"66","severity":1,"message":"95","line":3,"column":10,"nodeType":"68","messageId":"69","endLine":3,"endColumn":29},{"ruleId":"66","severity":1,"message":"96","line":4,"column":22,"nodeType":"68","messageId":"69","endLine":4,"endColumn":32},{"ruleId":"66","severity":1,"message":"97","line":4,"column":34,"nodeType":"68","messageId":"69","endLine":4,"endColumn":44},{"ruleId":"66","severity":1,"message":"98","line":95,"column":17,"nodeType":"68","messageId":"69","endLine":95,"endColumn":30},{"ruleId":"84","severity":1,"message":"85","line":119,"column":17,"nodeType":"86","messageId":"87","endLine":128,"endColumn":18},{"ruleId":"84","severity":1,"message":"85","line":175,"column":13,"nodeType":"86","messageId":"87","endLine":179,"endColumn":14},{"ruleId":"66","severity":1,"message":"99","line":1,"column":10,"nodeType":"68","messageId":"69","endLine":1,"endColumn":25},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'Component' is defined but never used.","'dice' is defined but never used.","'playerList' is defined but never used.","'gamelogo' is defined but never used.","'moveDist' is defined but never used.","'eventsArray' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Assignments to the 'alreadyGen' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Client' is defined but never used.","'Server' is defined but never used.","'Game' is defined but never used.","'react' is defined but never used.","'UpwardMobilityBoard' is defined but never used.","'itemsArray' is defined but never used.","'buffsArray' is defined but never used.","'currPlayToken' is assigned a value but never used.","'UpwardsMobility' is defined but never used."]