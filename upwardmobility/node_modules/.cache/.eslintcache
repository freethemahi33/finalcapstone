[{"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Game.js":"1","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Board.js":"2","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/eventsfile.js":"3","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/App.js":"4","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/index.js":"5","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/reportWebVitals.js":"6"},{"size":13318,"mtime":1681575466669,"results":"7","hashOfConfig":"8"},{"size":20720,"mtime":1681344296177,"results":"9","hashOfConfig":"8"},{"size":7715,"mtime":1681333403438,"results":"10","hashOfConfig":"8"},{"size":556,"mtime":1681575559377,"results":"11","hashOfConfig":"8"},{"size":535,"mtime":1677962875959,"results":"12","hashOfConfig":"8"},{"size":362,"mtime":1677962875959,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"10ybc25",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Game.js",["35","36","37","38","39","40","41","42","43","44"],[],"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Board.js",["45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71"],[],"import React, {Component, useEffect, useState} from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Popup from 'reactjs-popup';\n\nimport dice from './GameDieBigpng.png'\nimport playerList from './PlayerListBackground.png'\nimport gamelogo from './Upward_Mobility_big.png'\nimport { moveDist } from \"./Game\";\nimport { eventsArray} from \"./eventsfile\";\n\n// console.log(\"Events array: \" + eventsArray)\n\nexport function UpwardMobilityBoard ({ctx, G, moves, events, eventsArray}){\n\n    const [disPlayerName, setPlayerName] = useState(\"\")\n    const [disPlayerJob, setPlayerJob] = useState(\"\")\n    const [disPlayerCur, setPlayerCur] = useState(\"\")\n\n    const [disPlay1Name, setPlay1Name] = useState(\"\")\n    const [disPlay2Name, setPlay2Name] = useState(\"\")\n    const [disPlay3Name, setPlay3Name] = useState(\"\")\n    const [disPlay4Name, setPlay4Name] = useState(\"\")\n    const [disPlay5Name, setPlay5Name] = useState(\"\")\n    const [disPlay6Name, setPlay6Name] = useState(\"\")\n\n    const [disPlay1Job, setPlay1Job] = useState(\"\")\n    const [disPlay2Job, setPlay2Job] = useState(\"\")\n    const [disPlay3Job, setPlay3Job] = useState(\"\")\n    const [disPlay4Job, setPlay4Job] = useState(\"\")\n    const [disPlay5Job, setPlay5Job] = useState(\"\")\n    const [disPlay6Job, setPlay6Job] = useState(\"\")\n\n    const [mouseOverBuffs, setMouseOverBuffs] = useState(false)\n    const [loadPlayerBuffs, setPlayerBuffs] = useState(\"\")\n\n    const [mouseOverInventoryItem, setMouseOverInventoryItem] = useState(false)\n    const [loadInventoryItems, setInventoryItems] = useState(\"\")\n\n    function handleMouseOver(){\n        setMouseOverBuffs(true)\n        loadBuffString()\n    }\n\n    function handleMouseOut(){\n        setMouseOverBuffs(false)\n    }\n    function handleMouseOverInventory(){\n        setMouseOverInventoryItem(true)\n        loadInventoryString()\n    }\n    function handleMouseOutInventory(){\n        setMouseOverInventoryItem(false)\n    }\n\n    function loadBuffString(){\n        let buffs = \" \"\n        for(let i = 0; i < 2; i++){\n            buffs += \"Player \" + (i + 1) + \": \"\n            for(let j = 0; j<G.players[i].buffs.length; j++){\n                buffs += G.players[i].buffs[j].name\n                if(j==G.players[i].buffs.length - 1){\n                    buffs +=\" \"\n                }\n                else{\n                    buffs +=\", \"\n                }\n            }\n            buffs += \"\\n\"\n        }\n        setPlayerBuffs(buffs)\n        // console.log(buffs)\n    }\n\n    function loadInventoryString(){\n        let items = \" \"\n        // items = G.players[ctx.currentPlayer].inventory\n        items = G.players[0].inventory[0].description\n        // for(let i = 0; i < 2; i++){\n        //     items += \"Player \" + (i+1) + \": \"\n        //     for(let j = 0; j <G.players[i].inventory.length; j++){\n        //         items += G.players[i].inventory[j]\n        //         if(j==G.players[i].inventory.length-1) items += \" \"\n        //         else items += \", \"\n        //     }\n        //     items += \"\\n\"\n        // }\n        setInventoryItems(items)\n        // console.log(items)\n    }\n\n    useEffect(() =>{\n        setPlayerName(\"Player 1\")\n        setPlayerJob(\"Job: \" + G.players[0].jobTitle)\n        setPlayerCur(\"$\" + G.players[0].currency)\n    })\n\n    useEffect(()=>{\n      if(G.players[0] !== undefined){\n          setPlay1Name(\"Player 1\")\n          setPlay1Job(G.players[0].jobTitle)\n      }\n      if(G.players[1] !== undefined){\n          setPlay2Name(\"Player 2\")\n          setPlay2Job(G.players[1].jobTitle)\n      }\n      if(G.players[2] !== undefined){\n          setPlay3Name(\"Player 3\")\n          setPlay3Job(G.players[2].jobTitle)\n      }\n        if(G.players[3] !== undefined){\n            setPlay4Name(\"Player 4\")\n            setPlay4Job(G.players[3].jobTitle)\n        }\n        if(G.players[4] !== undefined){\n            setPlay5Name(\"Player 5\")\n            setPlay5Job(G.players[4].jobTitle)\n        }\n        if(G.players[5] !== undefined){\n            setPlay6Name(\"Player 6\")\n            setPlay6Job(G.players[5].jobTitle)\n        }\n    })\n\n\n    let alreadyGen = false;\n\n    useEffect(() => {\n        // console.log(\"testing useEffect\")\n    }, );\n\n    if (G.players[ctx.currentPlayer].position >= 50) {\n        // events.setPhase(\"winningGameScreen\");\n        // console.log(\"if case for winningGameScreen\")\n        ctx.phase = \"winningGameScreen\"\n    }\n\n    useEffect(() => {\n        if(alreadyGen === false){\n            for(let i = 0; i< 2; i++){\n                if(G.players[i] !== undefined){\n                    let playerToken = document.createElement(\"div\")\n                    playerToken.setAttribute(\"id\", \"playerToken\" + i);\n                    playerToken.setAttribute(\"class\", \"playerToken\")\n                    playerToken.style.top = \"93%\"\n                    if(i ==0)\n                        playerToken.style.backgroundColor = \"rgba(234,0,217,1)\"\n                    if(i ==1)\n                        playerToken.style.backgroundColor = \"rgba(115,248,255,1)\"\n                    if(i == 2)\n                        playerToken.style.backgroundColor = \"rgba(0,201,60,1)\"\n                    if(i == 3)\n                        playerToken.style.backgroundColor = \"rgba(196,0,0,1)\"\n                    if(i == 4)\n                        playerToken.style.backgroundColor = \"rgba(105,0,225,1)\"\n                    if(i == 5)\n                        playerToken.style.backgroundColor = \"rgba(0,61,204,1)\"\n\n                    document.getElementById(\"progressionDiv\").append(playerToken)\n                }\n            }\n            alreadyGen = true;\n        }\n    })\n\n    const handleAnswerSelect = (answerIndex) => {\n        moves.selectAnswer(answerIndex);\n    };\n\n    const { moveDist } = G;\n\n    const [selectedItem, setSelectedItem] = useState(null);\n\n    let eventScreenContents = \"\";\n\n    let inventoryScreenContents = (\n        <div>\n            <div className=\"inventory-item-container\">\n                {G.players[ctx.currentPlayer].inventory && G.players[ctx.currentPlayer].inventory.map((item, index) => (\n                    <img onMouseOver={handleMouseOverInventory} key={index} className=\"InventoryImage\" id={`inventoryItem-${index}`} src={item.image}/>\n                ))}\n            </div>\n        </div>\n    )\n\n    switch (ctx.phase) {\n        case \"rollScreen\":\n            eventScreenContents = (\n                <div>\n                    <button onClick = {() => moves.rollDice()}  className=\"DiceButton\" id=\"DiceButton\"></button>\n                    <img  onClick = {() => moves.rollDice()} className=\"DiceImage\" id=\"NoPath_-_Copy_8\" src=\"NoPath_-_Copy_8.png\" srcSet=\"NoPath_-_Copy_8.png 1x, NoPath_-_Copy_8@2x.png 2x\"/>\n                    <div id=\"A_pair_of_strange_dice_lay_bef\">\n                        A pair of strange dice lay before you...\n                    </div>\n                </div>\n            )\n            // if (G.players[ctx.currentPlayer].position === 25) {\n            //     events.setPhase(\"winningGameScreen\");\n            //     G.winningPlayer = ctx.currentPlayer;\n            // }\n            break;\n        case \"eventOrItemScreen\":\n            eventScreenContents = (\n                <div>\n                    <span id=\"rollVal\" className=\"inGameText\"> Player {ctx.currentPlayer + 1} with job title: {G.players[ctx.currentPlayer].jobTitle} rolls a {moveDist} landing on cell {G.players[ctx.currentPlayer].position}</span>\n                    <button onClick={() => events.setPhase(\"eventScreen\")} className=\"inGameButton\" id=\"showEventButton\">Show Event</button>\n                    <button onClick={() => events.setPhase(\"useItemScreen\")} className=\"inGameButton\" id=\"use-item-button\">Use Item</button>\n                </div>\n            )\n            break;\n        case \"eventScreen\":\n            eventScreenContents = (\n                <div>\n                    <div>\n                        <span className=\"inGameText\">{G.currentEvent.description}</span>\n                        <img className=\"EventImage\" id=\"EventImage\" src={G.currentEvent.image} />\n                    </div>\n                    <div className=\"event-button-container\">\n                        {G.currentEvent.options && G.currentEvent.options.map((option, index) => (\n                            <button key={index} onClick={() => {\n                                moves.selectAnswer(index);\n                                // console.log(\"This is index: \", index)\n                                // console.log(\"This is event response: \", G.currentEvent.results[index].effect)\n                                moves.eventResponse(G.currentEvent.results[index].effect);\n                                // moves.pickUpItem(G.currentEvent.results[index].resultReward);\n                                events.setPhase(\"eventResponseScreen\");\n                            }} className=\"answerButton\">{option}</button>\n                        ))}\n                    </div>\n\n                </div>\n            )\n\n            break;\n\n        case \"useItemScreen\":\n            eventScreenContents = (\n                <div>\n                    <span className=\"inGameText\">This is the use item screen</span>\n                    <div className=\"dropdown-container\">\n                        <Dropdown onSelect={(key) => setSelectedItem(G.players[ctx.currentPlayer].inventory[key])}>\n                            <Dropdown.Toggle variant=\"success\">\n                                {selectedItem ? selectedItem.name : \"Select Item\"}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                {G.players[ctx.currentPlayer].inventory && G.players[ctx.currentPlayer].inventory.map((item, index) => (\n                                    <Dropdown.Item key={index} eventKey={index}>\n                                        {item.name}\n                                    </Dropdown.Item>\n                                ))}\n                            </Dropdown.Menu>\n                        </Dropdown>\n\n                    </div>\n                    <button\n                        className=\"inGameButton\" id=\"use-item-button-fromscreen\"\n                        onClick={() => {\n                            if (selectedItem) {\n                                moves.useItem(selectedItem.name);\n                                // console.log(\"Selected item: \" + selectedItem.name)\n                            }\n                            events.setPhase(\"itemEffectResultScreen\");\n                        }}>Use Item\n                    </button>\n\n                    <button className=\"inGameButton\" id=\"cancel-item-button\"\n                            onClick={() => events.setPhase(\"eventOrItemScreen\")}>\n                        Cancel\n                    </button>\n                </div>\n            )\n            break;\n\n        case \"itemEffectResultScreen\":\n            eventScreenContents = (\n                <div>\n                    <span className=\"inGameText\">{selectedItem.onUse}</span>\n                    <div className=\"event-button-container\">\n                        <button onClick={() => events.setPhase(\"eventScreen\")} className=\"answerButton\">Proceed</button>\n                    </div>\n                </div>\n            );\n            break;\n\n        // case \"pickUpItemScreen\":\n        //     console.log(\"Current event from pick up item screen: \" + G.currentEvent.eventReward)\n        //\n        //     eventScreenContents = (\n        //         <div>\n        //             <span className=\"inGameText\">{G.currentEvent.eventReward.description}</span>\n        //             <div className=\"event-button-container\">\n        //                 <button onClick={() => { events.setPhase(\"endTurnScreen\"); moves.pickUpItem(G.currentEvent.eventReward) }} className=\"answerButton\">Proceed</button>\n        //             </div>\n        //         </div>\n        //     )\n        //     break;\n\n\n            // event response screen\n\n        case \"eventResponseScreen\":\n            const answerIndex = G.players[ctx.currentPlayer].selectedOption;\n            const getEventResult = G.currentEvent.results[answerIndex].effect;\n            // console.log(\"This is index of users answer: \"+ answerIndex)\n            // console.log(\"Event effect : \" + getEventResult)\n            eventScreenContents = (\n                <div>\n                    <span className=\"inGameText\">Event Result Screen {G.currentEvent.results[answerIndex].description}</span>\n                    <div className=\"event-button-container\">\n                        <button onClick={() => events.setPhase(\"eventResponseScreen2\")} className=\"answerButton\">Proceed</button>\n                    </div>\n                </div>\n            )\n            break;\n\n        case \"eventResponseScreen2\":\n            const answerInd = G.players[ctx.currentPlayer].selectedOption;\n            eventScreenContents = (\n                <div>\n                    <span className=\"inGameText\">Event Result Screen {G.currentEvent.results[answerInd].resultReward.description}</span>\n                    <div className=\"event-button-container\">\n                        <button onClick={() => {\n                            events.setPhase(\"endTurnScreen\");\n                            console.log(\"Event response screen 2: result reward\" + G.currentEvent.results[answerInd].resultReward)\n                            moves.pickUpItem(G.currentEvent.results[answerInd].resultReward);\n                        }} className=\"answerButton\">Proceed</button>\n                    </div>\n                </div>\n            )\n            break;\n\n\n        case \"winningGameScreen\":\n            eventScreenContents = (\n                <div>\n                    <span className=\"winningGameText\">Player {ctx.currentPlayer} has won the game.</span>\n                </div>\n            )\n            break;\n        case \"endTurnScreen\":\n            eventScreenContents = (\n                <div>\n                    <span className=\"inGameText\">Your turn is over!</span>\n                    <div className=\"event-button-container\">\n                        <button onClick={() => { events.endTurn(); events.setPhase(\"rollScreen\"); setMouseOverBuffs(false); setMouseOverInventoryItem(false) }} className=\"answerButton\">End Turn</button>\n\n                    </div>\n\n                </div>\n            )\n            break;\n    }\n\n    return(\n        <div className=\"GamePage\">\n            <div className=\"Rectangle_42\" id = \"eventScreen\">\n                {eventScreenContents}\n            </div>\n\n            <div className=\"GameProgression\" id = \"progressionDiv\">\n                <rect id=\"GameProgressionMenu\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\n                </rect>\n            </div>\n\n            <img id=\"ProgresionImage\" src=\"src/Templates/assets/StartFinishScale.png\" srcSet=\"NoPath_-_Copy_6.png 1x, NoPath_-_Copy_6@2x.png 2x\"/>\n\n\n            {/*Player List*/}\n            <svg className=\"GamePlayerBackground\">\n            </svg>\n            <img id=\"NoPath_-_Copy_10\" src=\"NoPath_-_Copy_10.png\" srcSet=\"NoPath_-_Copy_10.png 1x, NoPath_-_Copy_10@2x.png 2x\"/>\n\n            <div className=\"GamePlayer_1\" >\n                <span className = \"playerNameDis\">{disPlay1Name}</span>\n                <ellipse id=\"GamePlayer_1\" ></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay1Job}</span>\n            </div>\n            <div className=\"GamePlayer_2\">\n                <span className=\"playerNameDis\">{disPlay2Name}</span>\n                <ellipse id=\"GamePlayer_2\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay2Job}</span>\n            </div>\n            <div className=\"GamePlayer_3\">\n                <span className=\"playerNameDis\">{disPlay3Name}</span>\n                <ellipse id=\"GamePlayer_3\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay3Job}</span>\n            </div>\n            <div className=\"GamePlayer_4\">\n                <span className=\"playerNameDis\">{disPlay4Name}</span>\n                <ellipse id=\"GamePlayer_4\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay4Job}</span>\n            </div>\n            <div className=\"GamePlayer_5\">\n                <span className=\"playerNameDis\">{disPlay5Name}</span>\n                <ellipse id=\"GamePlayer_5\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay5Job}</span>\n            </div>\n            <div className=\"GamePlayer_6\">\n                <span className=\"playerNameDis\">{disPlay6Name}</span>\n                <ellipse id=\"GamePlayer_6\" rx=\"53\" ry=\"53\" cx=\"53\" cy=\"53\"></ellipse>\n                <span className=\"playerJobTitleDis\">{disPlay6Job}</span>\n            </div>\n            {/*Player List*/}\n\n\n            {/*Inventory List*/}\n            <div className=\"Inventory\">\n                {mouseOverInventoryItem ? (\n                    <div className=\"showItemDescription\">\n                        <p className=\"inventoryItemDescriptionText\">\n                            {loadInventoryItems.split(\"\\n\").map((line, index) => (\n                                <React.Fragment key={index}>\n                                    {line}\n                                    {index !== loadInventoryItems.split(\"\\n\").length -1 && <br/>}\n                                </React.Fragment>\n                            ))}\n                        </p>\n                        <p className=\"inventoryItemDescriptionText\" onMouseOver={handleMouseOutInventory} >\n                            Hover over this to go back\n                        </p>\n                    </div>\n                ) : (\n                    <div>\n                        <rect id=\"Inventory\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\n                            {inventoryScreenContents}\n                        </rect>\n                    </div>\n                )}\n            </div>\n            <svg className=\"InventoryLabel\">\n                <rect id=\"InventoryLabel\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\">\n                </rect>\n            </svg>\n\n            <div id=\"Inventory_Label_Word\">\n                Inventory\n            </div>\n            {/*Inventory List*/}\n\n\n            {/*Chat List*/}\n            <div className=\"ChatAndLogo\">\n                <rect id=\"ChatAndLogo\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\"></rect>\n                <div id=\"chatSection\"></div>\n            </div>\n            <input className=\"chatBox\" type=\"text\" placeholder=\"Type here to chat\" id=\"chatBox\" rx=\"7\" ry=\"7\" x=\"0\" y=\"0\" />\n\n            <div id=\"Type_here_to_chat\">\n                <span>Type here to chat...</span>\n            </div>\n            {/*Chat List*/}\n\n\n            {/*Player Stat List*/}\n            <div className=\"PlayerStatsBackground\">\n                {mouseOverBuffs ? (\n                    <div className=\"showPlayerBuffs\">\n                        <p className =\"playerBuffText\">\n                            {loadPlayerBuffs.split(\"\\n\").map((line, index) => (\n                                <React.Fragment key={index}>\n                                    {line}\n                                    {index !== loadPlayerBuffs.split(\"\\n\").length - 1 && <br />}\n                                </React.Fragment>\n                            ))}\n                        </p>\n                        <p className=\"playerBuffText\" onMouseOver={handleMouseOut}>Hover over this to go back</p>\n                    </div>\n                ) : (\n                    <div>\n                        <rect id=\"PlayerStatsBackground\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\"> </rect>\n                        <div className=\"PlayerName\" id=\"PlayerName\">\n                            {disPlayerName}\n                        </div>\n                        <div className=\"PlayerJobTitle\" id=\"PlayerJobTitle\">\n                            {disPlayerJob}\n                        </div>\n                        <img onMouseOver={handleMouseOver} className=\"PlayerBuffsIcon\" id=\"PlayerBuffsIcon\" src=\"BuffIcon.png\" srcSet=\"BuffIcon.png 1x, BuffIcon.png.png 2x\"/>\n                        <img className=\"PlayerDebuffsIcon\" id=\"PlayerDebuffsIcon\" src=\"DebuffIcon.png\" srcSet=\"DebuffIcon.png 1x, DebuffIcon.png.png 2x\"/>\n                        <div className=\"PlayerCurrency\" id=\"PlayerCurrency\">\n                            {disPlayerCur}\n                        </div>\n                        <div className=\"PlayerIncome\" id=\"PlayerIncome\">\n\n                        </div>\n                    </div>\n                )}\n\n            </div>\n\n            {/*Player Stat List*/}\n        </div>\n    )\n}","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/eventsfile.js",["72","73","74","75"],[],"import { UpwardsMobility } from \"./Game\";\nimport montyPythonImage from \"./monypython.png\";\nimport pixelCat from \"./pixelcat.png\";\nimport usbDrive from \"./usbdriveonroad.png\";\nimport windowsError from \"./windowserror.jpg\";\nimport alleyMan from \"./alleyman.jpg\";\nimport buriedTreasure from \"./buriedtreasure.avif\";\nimport momoney from \"./moneystaff.jpg\"\nexport const eventsArray = [\n    // {\n    //     id: 1,\n    //     description: \"A mysterious raggedy wizard appears before you and asks the question... 'What is the airspeed velocity of an unladen swallow?'\",\n    //     options: [\n    //         \"What do you mean? African or European swallow?\",\n    //         \"I don't know that!\",\n    //         \"What is an unladen swallow?\"\n    //     ],\n    //     results: [\n    //         \"The wizard has dropped his staff of Mo Money which you pick up and is added to your inventory.\",\n    //         \"incorrect answer for option 2\",\n    //         \"incorrect answer for opetion 3\",\n    //         ],\n    //     correctAnswer: 0,\n    //     image: montyPythonImage,\n    //     // item: { name: \"Staff of MoMoney\", description: \"staff of mo money description\" }\n    //     eventReward: {\n    //         type: \"item\",\n    //         description: \"The wizard has dropped his staff of Mo Money which you pick up and is added to your inventory.\",\n    //         item: { name: \"Staff of MoMoney\", image: montyPythonImage, description: \"staff of mo money description\", onUse: \"You use the staff of Mo Money and randomly generate between 0 and 10 currency\"}\n    //     }\n    // },\n\n\n    {\n        id: 1,\n        description: \"A mysterious raggedy wizard appears before you and asks the question... 'What is the airspeed velocity of an unladen swallow?'\",\n        options: [\n            \"What do you mean? African or European swallow?\",\n            \"I don't know that!\",\n            \"What is an unladen swallow?\"\n        ],\n        results: [\n            { description: \"header Response description for index 0\", effect: \"effectResponse1\",\n                resultReward: {\n                    type: \"buff\",\n                    description: \"Description for index 0 inside of resultReward\",\n                    buff: { name: \"Buff of Mo Money\", image: buriedTreasure, description: \"Description of buff\", duration: 5 }\n                },\n            },\n            { description: \"header Response description for index 1\", effect: \"effectResponse1\", image: windowsError,\n                resultReward: {\n                    type: \"item\",\n                    description: \"Description for index 1 inside of resultReward\",\n                    item: { name: \"ITEM \", image: usbDrive, description: \"DESCRIPTION OF ITEM\"}\n                },\n            },\n            { description: \"header Response description for index 2\", effect: \"effectResponse1\", image : usbDrive,\n                resultReward: {\n                    type: \"item\",\n                    description: \"Description for index 2 inside of resultReward\",\n                    item: { name: \"ITEM THING\", image: windowsError, description: \"DESCRIPTION OF ITEM\"}\n                },\n            },\n        ],\n        image: montyPythonImage,\n    },\n\n\n\n\n\n    //  {\n    //     id: 2,\n    //     description: \"You stumble upon a treasure chest buried in the ground.\",\n    //     options: [\n    //         \"Open the chest\",\n    //         \"Leave the chest alone\",\n    //         \"Kick the chest\"\n    //     ],\n    //     image: buriedTreasure,\n    //     // onCorrect: \"You find a 20 currency and add it to your wallet!\",\n    //     results: [\n    //         \"You have opened the chest and find some money\",\n    //         \"You have left the chest alone. Bad idea. You die.  \",\n    //         \"You break your foot. You skip your next 3 turns. \",\n    //         ],\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //         type: \"buff\",\n    //         description: \"You gain the buff of mo money where you gain 2 currency for your next 3 rolls.\",\n    //         buff: { name: \"Buff of Mo Money\", image: \"\", description: \"buff of mo money description\", duration: 3 }\n    //     }\n    // },\n    // {\n    //     id: 3,\n    //     description: \"Event 3\",\n    //     options: [\n    //         \"Not answer\",\n    //         \"Answer\",\n    //         \"Not Answer\"\n    //     ],\n    //     image: \"\",\n    //     onCorrect: \"Good thing happens\",\n    //     onIncorrect: \"Bad thing happens\",\n    //     correctAnswer: 1,\n    //     eventReward: {\n    //         type: \"buff\",\n    //         description: \"You gain the buff or good things happening where good things happen for your next 5 rolls.\",\n    //         buff: { name: \"Buff of Mo Money\", description: \"buff of mo money description\", duration: 5 }\n    //     }\n    // },\n    // {\n    //     id: 4,\n    //     description: \"You find a cat.\",\n    //     options: [\n    //         \"Pet the cat\",\n    //         \"you do something\",\n    //         \"you do something else\"\n    //     ],\n    //     image: pixelCat,\n    //     onCorrect: \"The cat is happy and gives you 2 coins\",\n    //     onIncorrect: \"The cat becomes violently angry and attacks you, stealing 3 coins\",\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //         type: \"The cat also gives you something cool\",\n    //         description: \"The cat also gives you something cool and you add it to your inventory.\",\n    //         item: { name: \"Cat item\", description: \"description for cat item\" }\n    //     }\n    // },\n    // {\n    //     id: 5,\n    //     description: \"You come across a shady looking man in a dark alley... \\n \\\"You look like someone with a good eye, stranger. You lookin' to buy?\\\" \",\n    //     options: [\n    //         \"Buy item 1 ($x)\",\n    //         \"Buy item 2 ($y)\",\n    //         \"Buy item 3 ($z)\"\n    //     ],\n    //     image: alleyMan,\n    //     onCorrect: \"The cat is happy and gives you 2 coins\",\n    //     onIncorrect: \"The cat becomes violently angry and attacks you, stealing 3 coins\",\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //         type: \"The cat also gives you something cool\",\n    //         description: \"The cat also gives you something cool and you add it to your inventory.\",\n    //         item: { name: \"Cat item\", description: \"description for cat item\" }\n    //     }\n    // },\n    // {\n    //     id: 6,\n    //     description: \"Your free trial of \\\"LifeOS\\\" has ended.\",\n    //     options: [\n    //         \"Buy License\",\n    //         \"Cancel\"\n    //     ],\n    //     image: windowsError,\n    //     onCorrect: \"I'm sure it'll be fine\",\n    //     onIncorrect: \"You payed $x for a license, hopefully that's the end of it\", //subract $x\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //\n    //     }\n    // },\n    // {\n    //     id: 7,\n    //     description: \"You find an abandoned USB drive on the side of the road.\",\n    //     options: [\n    //         \"Leave it\",\n    //         \"Let's see what's inside\"\n    //     ],\n    //     image: usbDrive,\n    //     onCorrect: \"Good idea, that's really unsafe\",\n    //     onIncorrect: \"What did you think was going to happen?\", //Idk man, just really fuck their shit up\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //\n    //     }\n    // },\n    // {\n    //     id: 8,\n    //     description: \"You find an abandoned USB drive on the side of the road.\",\n    //     options: [\n    //         \"Leave it\",\n    //         \"Let's see what's inside\"\n    //     ],\n    //     image: usbDrive,\n    //     onCorrect: \"Good idea, that's really unsafe\",\n    //     onIncorrect: \"What did you think was going to happen?\",\n    //     correctAnswer: 0,\n    //     eventReward: {\n    //\n    //     }\n    // },\n\n];\n","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/App.js",["76","77","78"],[],"import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport { Client } from \"boardgame.io/react\";\nimport { UpwardsMobility } from \"./Game\";\nimport { UpwardMobilityBoard } from \"./Board\";\nimport { Server } from \"boardgame.io/server\";\nimport './GamePageStyle.css';\n\n// const server = Server({\n//     games: [UpwardsMobility],\n// });\n\n// server.run(8000);\n\nconst App = Client({\n    game: UpwardsMobility,\n    board: UpwardMobilityBoard,\n    // debug: false,\n    // multiplayer: { server: \"localhost:8000\" },\n});\n\nexport default App;\n\n","/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/index.js",[],[],"/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/reportWebVitals.js",[],[],{"ruleId":"79","severity":1,"message":"80","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":24},{"ruleId":"79","severity":1,"message":"83","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":13},{"ruleId":"79","severity":1,"message":"84","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":29},{"ruleId":"79","severity":1,"message":"85","line":5,"column":23,"nodeType":"81","messageId":"82","endLine":5,"endColumn":33},{"ruleId":"79","severity":1,"message":"86","line":5,"column":35,"nodeType":"81","messageId":"82","endLine":5,"endColumn":45},{"ruleId":"79","severity":1,"message":"87","line":114,"column":17,"nodeType":"81","messageId":"82","endLine":114,"endColumn":30},{"ruleId":"88","severity":1,"message":"89","line":192,"column":17,"nodeType":"90","messageId":"91","endLine":201,"endColumn":18},{"ruleId":"88","severity":1,"message":"89","line":252,"column":13,"nodeType":"90","messageId":"91","endLine":267,"endColumn":14},{"ruleId":"79","severity":1,"message":"92","line":259,"column":27,"nodeType":"81","messageId":"82","endLine":259,"endColumn":39},{"ruleId":"88","severity":1,"message":"89","line":276,"column":13,"nodeType":"90","messageId":"91","endLine":286,"endColumn":14},{"ruleId":"79","severity":1,"message":"93","line":1,"column":16,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"94","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":13},{"ruleId":"79","severity":1,"message":"95","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":12},{"ruleId":"79","severity":1,"message":"96","line":7,"column":8,"nodeType":"81","messageId":"82","endLine":7,"endColumn":18},{"ruleId":"79","severity":1,"message":"97","line":8,"column":8,"nodeType":"81","messageId":"82","endLine":8,"endColumn":16},{"ruleId":"79","severity":1,"message":"98","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":18},{"ruleId":"79","severity":1,"message":"99","line":10,"column":10,"nodeType":"81","messageId":"82","endLine":10,"endColumn":21},{"ruleId":"100","severity":1,"message":"101","line":62,"column":21,"nodeType":"102","messageId":"103","endLine":62,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":92,"column":5,"nodeType":"81","endLine":92,"endColumn":14,"suggestions":"106"},{"ruleId":"104","severity":1,"message":"107","line":98,"column":5,"nodeType":"81","endLine":98,"endColumn":14,"suggestions":"108"},{"ruleId":"100","severity":1,"message":"101","line":146,"column":26,"nodeType":"102","messageId":"103","endLine":146,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":148,"column":26,"nodeType":"102","messageId":"103","endLine":148,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":150,"column":26,"nodeType":"102","messageId":"103","endLine":150,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":152,"column":26,"nodeType":"102","messageId":"103","endLine":152,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":154,"column":26,"nodeType":"102","messageId":"103","endLine":154,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":156,"column":26,"nodeType":"102","messageId":"103","endLine":156,"endColumn":28},{"ruleId":"104","severity":1,"message":"109","line":162,"column":26,"nodeType":"110","endLine":162,"endColumn":30},{"ruleId":"79","severity":1,"message":"111","line":166,"column":11,"nodeType":"81","messageId":"82","endLine":166,"endColumn":29},{"ruleId":"112","severity":1,"message":"113","line":180,"column":21,"nodeType":"114","endLine":180,"endColumn":152},{"ruleId":"88","severity":1,"message":"89","line":186,"column":5,"nodeType":"90","messageId":"91","endLine":352,"endColumn":6},{"ruleId":"112","severity":1,"message":"113","line":191,"column":21,"nodeType":"114","endLine":191,"endColumn":191},{"ruleId":"112","severity":1,"message":"113","line":216,"column":25,"nodeType":"114","endLine":216,"endColumn":98},{"ruleId":"79","severity":1,"message":"115","line":303,"column":19,"nodeType":"81","messageId":"82","endLine":303,"endColumn":33},{"ruleId":"112","severity":1,"message":"113","line":365,"column":13,"nodeType":"114","endLine":365,"endColumn":147},{"ruleId":"112","severity":1,"message":"113","line":371,"column":13,"nodeType":"114","endLine":371,"endColumn":129},{"ruleId":"112","severity":1,"message":"113","line":477,"column":25,"nodeType":"114","endLine":477,"endColumn":175},{"ruleId":"112","severity":1,"message":"113","line":478,"column":25,"nodeType":"114","endLine":478,"endColumn":155},{"ruleId":"79","severity":1,"message":"116","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"117","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":16},{"ruleId":"79","severity":1,"message":"118","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":16},{"ruleId":"79","severity":1,"message":"119","line":8,"column":8,"nodeType":"81","messageId":"82","endLine":8,"endColumn":15},{"ruleId":"79","severity":1,"message":"120","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":12},{"ruleId":"79","severity":1,"message":"83","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":13},{"ruleId":"79","severity":1,"message":"121","line":7,"column":10,"nodeType":"81","messageId":"82","endLine":7,"endColumn":16},"no-unused-vars","'montyPythonImage' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'UpwardMobilityBoard' is defined but never used.","'itemsArray' is defined but never used.","'buffsArray' is defined but never used.","'currPlayToken' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'tempPosition' is assigned a value but never used.","'Component' is defined but never used.","'Popup' is defined but never used.","'dice' is defined but never used.","'playerList' is defined but never used.","'gamelogo' is defined but never used.","'moveDist' is defined but never used.","'eventsArray' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPlayerName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [G.players] as a second argument to the useEffect Hook.",["122"],"React Hook useEffect contains a call to 'setPlay1Name'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [G.players] as a second argument to the useEffect Hook.",["123"],"Assignments to the 'alreadyGen' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'handleAnswerSelect' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getEventResult' is assigned a value but never used.","'UpwardsMobility' is defined but never used.","'pixelCat' is defined but never used.","'alleyMan' is defined but never used.","'momoney' is defined but never used.","'logo' is defined but never used.","'Server' is defined but never used.",{"desc":"124","fix":"125"},{"desc":"124","fix":"126"},"Add dependencies array: [G.players]",{"range":"127","text":"128"},{"range":"129","text":"128"},[3307,3307],", [G.players]",[4115,4115]]