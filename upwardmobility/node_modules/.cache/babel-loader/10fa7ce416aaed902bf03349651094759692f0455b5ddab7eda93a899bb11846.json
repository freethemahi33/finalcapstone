{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTests = exports.createPatch = exports.applyPatch = void 0;\nvar pointer_1 = require(\"./pointer\");\nvar patch_1 = require(\"./patch\");\nvar diff_1 = require(\"./diff\");\n/**\r\nApply a 'application/json-patch+json'-type patch to an object.\r\n\r\n`patch` *must* be an array of operations.\r\n\r\n> Operation objects MUST have exactly one \"op\" member, whose value\r\n> indicates the operation to perform.  Its value MUST be one of \"add\",\r\n> \"remove\", \"replace\", \"move\", \"copy\", or \"test\"; other values are\r\n> errors.\r\n\r\nThis method mutates the target object in-place.\r\n\r\n@returns list of results, one for each operation: `null` indicated success,\r\n         otherwise, the result will be an instance of one of the Error classes:\r\n         MissingError, InvalidOperationError, or TestError.\r\n*/\nfunction applyPatch(object, patch) {\n  return patch.map(function (operation) {\n    return patch_1.apply(object, operation);\n  });\n}\nexports.applyPatch = applyPatch;\nfunction wrapVoidableDiff(diff) {\n  function wrappedDiff(input, output, ptr) {\n    var custom_patch = diff(input, output, ptr);\n    // ensure an array is always returned\n    return Array.isArray(custom_patch) ? custom_patch : diff_1.diffAny(input, output, ptr, wrappedDiff);\n  }\n  return wrappedDiff;\n}\n/**\r\nProduce a 'application/json-patch+json'-type patch to get from one object to\r\nanother.\r\n\r\nThis does not alter `input` or `output` unless they have a property getter with\r\nside-effects (which is not a good idea anyway).\r\n\r\n`diff` is called on each pair of comparable non-primitive nodes in the\r\n`input`/`output` object trees, producing nested patches. Return `undefined`\r\nto fall back to default behaviour.\r\n\r\nReturns list of operations to perform on `input` to produce `output`.\r\n*/\nfunction createPatch(input, output, diff) {\n  var ptr = new pointer_1.Pointer();\n  // a new Pointer gets a default path of [''] if not specified\n  return (diff ? wrapVoidableDiff(diff) : diff_1.diffAny)(input, output, ptr);\n}\nexports.createPatch = createPatch;\n/**\r\nCreate a test operation based on `input`'s current evaluation of the JSON\r\nPointer `path`; if such a pointer cannot be resolved, returns undefined.\r\n*/\nfunction createTest(input, path) {\n  var endpoint = pointer_1.Pointer.fromJSON(path).evaluate(input);\n  if (endpoint !== undefined) {\n    return {\n      op: 'test',\n      path: path,\n      value: endpoint.value\n    };\n  }\n}\n/**\r\nProduce an 'application/json-patch+json'-type list of tests, to verify that\r\nexisting values in an object are identical to the those captured at some\r\ncheckpoint (whenever this function is called).\r\n\r\nThis does not alter `input` or `output` unless they have a property getter with\r\nside-effects (which is not a good idea anyway).\r\n\r\nReturns list of test operations.\r\n*/\nfunction createTests(input, patch) {\n  var tests = new Array();\n  patch.filter(diff_1.isDestructive).forEach(function (operation) {\n    var pathTest = createTest(input, operation.path);\n    if (pathTest) tests.push(pathTest);\n    if ('from' in operation) {\n      var fromTest = createTest(input, operation.from);\n      if (fromTest) tests.push(fromTest);\n    }\n  });\n  return tests;\n}\nexports.createTests = createTests;","map":{"version":3,"names":["Object","defineProperty","exports","value","createTests","createPatch","applyPatch","pointer_1","require","patch_1","diff_1","object","patch","map","operation","apply","wrapVoidableDiff","diff","wrappedDiff","input","output","ptr","custom_patch","Array","isArray","diffAny","Pointer","createTest","path","endpoint","fromJSON","evaluate","undefined","op","tests","filter","isDestructive","forEach","pathTest","push","fromTest","from"],"sources":["C:/Users/Justin Neigh/WebstormProjects/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend/upwardmobility/node_modules/rfc6902/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createTests = exports.createPatch = exports.applyPatch = void 0;\r\nvar pointer_1 = require(\"./pointer\");\r\nvar patch_1 = require(\"./patch\");\r\nvar diff_1 = require(\"./diff\");\r\n/**\r\nApply a 'application/json-patch+json'-type patch to an object.\r\n\r\n`patch` *must* be an array of operations.\r\n\r\n> Operation objects MUST have exactly one \"op\" member, whose value\r\n> indicates the operation to perform.  Its value MUST be one of \"add\",\r\n> \"remove\", \"replace\", \"move\", \"copy\", or \"test\"; other values are\r\n> errors.\r\n\r\nThis method mutates the target object in-place.\r\n\r\n@returns list of results, one for each operation: `null` indicated success,\r\n         otherwise, the result will be an instance of one of the Error classes:\r\n         MissingError, InvalidOperationError, or TestError.\r\n*/\r\nfunction applyPatch(object, patch) {\r\n    return patch.map(function (operation) { return patch_1.apply(object, operation); });\r\n}\r\nexports.applyPatch = applyPatch;\r\nfunction wrapVoidableDiff(diff) {\r\n    function wrappedDiff(input, output, ptr) {\r\n        var custom_patch = diff(input, output, ptr);\r\n        // ensure an array is always returned\r\n        return Array.isArray(custom_patch) ? custom_patch : diff_1.diffAny(input, output, ptr, wrappedDiff);\r\n    }\r\n    return wrappedDiff;\r\n}\r\n/**\r\nProduce a 'application/json-patch+json'-type patch to get from one object to\r\nanother.\r\n\r\nThis does not alter `input` or `output` unless they have a property getter with\r\nside-effects (which is not a good idea anyway).\r\n\r\n`diff` is called on each pair of comparable non-primitive nodes in the\r\n`input`/`output` object trees, producing nested patches. Return `undefined`\r\nto fall back to default behaviour.\r\n\r\nReturns list of operations to perform on `input` to produce `output`.\r\n*/\r\nfunction createPatch(input, output, diff) {\r\n    var ptr = new pointer_1.Pointer();\r\n    // a new Pointer gets a default path of [''] if not specified\r\n    return (diff ? wrapVoidableDiff(diff) : diff_1.diffAny)(input, output, ptr);\r\n}\r\nexports.createPatch = createPatch;\r\n/**\r\nCreate a test operation based on `input`'s current evaluation of the JSON\r\nPointer `path`; if such a pointer cannot be resolved, returns undefined.\r\n*/\r\nfunction createTest(input, path) {\r\n    var endpoint = pointer_1.Pointer.fromJSON(path).evaluate(input);\r\n    if (endpoint !== undefined) {\r\n        return { op: 'test', path: path, value: endpoint.value };\r\n    }\r\n}\r\n/**\r\nProduce an 'application/json-patch+json'-type list of tests, to verify that\r\nexisting values in an object are identical to the those captured at some\r\ncheckpoint (whenever this function is called).\r\n\r\nThis does not alter `input` or `output` unless they have a property getter with\r\nside-effects (which is not a good idea anyway).\r\n\r\nReturns list of test operations.\r\n*/\r\nfunction createTests(input, patch) {\r\n    var tests = new Array();\r\n    patch.filter(diff_1.isDestructive).forEach(function (operation) {\r\n        var pathTest = createTest(input, operation.path);\r\n        if (pathTest)\r\n            tests.push(pathTest);\r\n        if ('from' in operation) {\r\n            var fromTest = createTest(input, operation.from);\r\n            if (fromTest)\r\n                tests.push(fromTest);\r\n        }\r\n    });\r\n    return tests;\r\n}\r\nexports.createTests = createTests;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}