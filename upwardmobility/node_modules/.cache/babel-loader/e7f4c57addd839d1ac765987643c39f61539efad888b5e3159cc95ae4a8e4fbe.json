{"ast":null,"code":"import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nimport { eventsArray, itemsArray, buffsArray } from \"./eventsfile\";\nexport const UpwardsMobility = {\n  // Turn phase flow\n  // 1) Roll dice move piece\n  // 2) Choose event or use item\n  // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n  // if correct answer than they pick up item and or gain currency then end turn\n  // if incorrect answer than negativeness happens then end turn\n  // 3b) If they choose the item, activate the item and do item thing and then show event\n\n  // rollScreen\n  // eventOrItemScreen\n  // itemScreen\n  // eventScreen\n  // correctAnswerScreen\n  // wrongAnswerScreen\n  // endTurnScreen\n\n  setup: () => ({\n    players: {\n      0: {\n        position: 0,\n        inventory: [\n          // { name: \"Staff of MoMoney\", image: \"\", description: \"item 1 description\", onUse: \"You randomly generate between 0 and 10 coins\" },\n          // { name: \"Staff of NoMoney\", image: \"\", description: \"item 2 description\", onUse: \"You randomly lose between 0 and 10 coins\" },\n          // { name: \"Orb of MoMoney\", image: \"\", description: \"item 3 description\", onUse: \"You gain the buff of MoMoney for 3 turns.\" }\n        ],\n        buffs: [],\n        currency: 0,\n        jobTitle: {\n          name: \"job title 1\",\n          description: \"description for job title 1\"\n        }\n      },\n      1: {\n        position: 0,\n        inventory: [\n          // { name: \"Staff of MoMoney\", image: \"\", description: \"item 1 description\", onUse: \"You randomly generate between 0 and 10 coins\" },\n          // { name: \"Staff of NoMoney\", image: \"\", description: \"item 2 description\", onUse: \"You randomly lose between 0 and 10 coins\" },\n          // { name: \"Orb of MoMoney\", image: \"\", description: \"item 3 description\", onUse: \"You gain the buff of MoMoney for 3 turns.\" }\n        ],\n        buffs: [],\n        currency: 0,\n        jobTitle: {\n          name: \"job title 1\",\n          description: \"description for job title 1\"\n        }\n      },\n      moveDist: 0\n    },\n    jobTitles: [{\n      name: \"job title 1\",\n      description: \"description for job title 1\"\n    }, {\n      name: \"job title 2\",\n      description: \"description for job title 2\"\n    }, {\n      name: \"job title 3\",\n      description: \"description for job title 3\"\n    }, {\n      name: \"job title 4\",\n      description: \"description for job title 4\"\n    }],\n    currentEvent: null,\n    board: {\n      0: {\n        currency: 0\n      },\n      1: {\n        currency: 2\n      },\n      2: {\n        currency: 2\n      },\n      3: {\n        currency: -1\n      },\n      4: {\n        currency: 3\n      },\n      5: {\n        currency: 5\n      },\n      6: {\n        currency: 1\n      },\n      7: {\n        currency: 0\n      },\n      8: {\n        currency: 0\n      },\n      9: {\n        currency: -2\n      },\n      10: {\n        currency: 0\n      },\n      11: {\n        currency: 0\n      },\n      12: {\n        currency: 2\n      },\n      13: {\n        currency: 2\n      },\n      14: {\n        currency: -1\n      },\n      15: {\n        currency: 3\n      },\n      16: {\n        currency: -2\n      },\n      17: {\n        currency: 1\n      },\n      18: {\n        currency: 2\n      },\n      19: {\n        currency: 0\n      },\n      20: {\n        currency: -2\n      },\n      21: {\n        currency: 2\n      },\n      22: {\n        currency: -2\n      },\n      23: {\n        currency: -2\n      },\n      24: {\n        currency: 0\n      },\n      25: {\n        currency: 0\n      }\n    }\n  }),\n  turn: {\n    order: TurnOrder.CONTINUE\n  },\n  // Define the moves for rolling the dice and updating the game state.\n  moves: {\n    rollDice: _ref => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref;\n      const die1 = Math.floor(Math.random() * 6) + 1;\n      const die2 = Math.floor(Math.random() * 6) + 1;\n      let moveDist = die1 + die2;\n      G.moveDist = moveDist;\n      G.players[ctx.currentPlayer].position += moveDist;\n      let getId = \"playerToken\" + ctx.currentPlayer;\n      let currPlayToken = document.getElementById(getId);\n      console.log(document.getElementById(\"playerToken\" + ctx.currentPlayer).style.top);\n      let calc = parseInt(document.getElementById(getId).style.top.toString().substring(0, 2));\n      let disCalc = calc - calc * (.025 * moveDist);\n      disCalc = disCalc + \"%\";\n      document.getElementById(getId).style.top = disCalc;\n      if (G.players[ctx.currentPlayer].position >= 10 && G.players[ctx.currentPlayer].position % 10 === 0) {\n        const randomIndex = Math.floor(Math.random() * G.jobTitles.length);\n        G.players[ctx.currentPlayer].jobTitle = G.jobTitles[randomIndex];\n      }\n      if (G.players[ctx.currentPlayer].position >= 20 && G.players[ctx.currentPlayer].position % 20 === 0) {\n        const randomIndex = Math.floor(Math.random() * G.jobTitles.length);\n        G.players[ctx.currentPlayer].jobTitle = G.jobTitles[randomIndex];\n      }\n      if (G.players[ctx.currentPlayer].position >= 30 && G.players[ctx.currentPlayer].position % 30 === 0) {\n        const randomIndex = Math.floor(Math.random() * G.jobTitles.length);\n        G.players[ctx.currentPlayer].jobTitle = G.jobTitles[randomIndex];\n      }\n      if (G.players[ctx.currentPlayer].position >= 40 && G.players[ctx.currentPlayer].position % 40 === 0) {\n        const randomIndex = Math.floor(Math.random() * G.jobTitles.length);\n        G.players[ctx.currentPlayer].jobTitle = G.jobTitles[randomIndex];\n      }\n\n      // Check for players active buffs\n      // G.players[ctx.currentPlayer].buffs.forEach((buff) => {\n      //     if (buff.type === \"moMoneyBuff\") {\n      //         moveDist += 1;\n      //         buff.duration--;\n      //         if (buff.duration === 0) {\n      //             G.players[ctx.currentPlayer].buffs.splice(\n      //                 G.players[ctx.currentPlayer].buffs.indexOf(buff),\n      //                 1\n      //             );\n      //         }\n      //     }\n      // });\n\n      G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\n        switch (buff.name) {\n          case \"Buff of Mo Money\":\n            G.players[ctx.currentPlayer].currency += 2;\n            buff.duration--;\n            if (buff.duration === 0) {\n              G.players[ctx.currentPlayer].buffs.splice(index, 1);\n            }\n            break;\n        }\n      });\n      G.currentEvent = eventsArray[Math.floor(Math.random() * eventsArray.length)];\n      console.log(\"current event reward type: \", G.currentEvent.eventReward.type);\n      events.setPhase(\"eventOrItemScreen\");\n    },\n    addCurrency: (_ref2, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref2;\n      G.players[ctx.currentPlayer].currency += currency;\n    },\n    loseCurrency: (_ref3, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref3;\n      G.players[ctx.currentPlayer].currency -= currency;\n    },\n    moveForward: (_ref4, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref4;\n      G.players[ctx.currentPlayer].position += moveDist;\n    },\n    moveBackward: (_ref5, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref5;\n      G.players[ctx.currentPlayer].position -= moveDist;\n    },\n    pickUpItem: (_ref6, name) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref6;\n      // const itemCell = G.board[G.players[ctx.currentPlayer].position];\n      // const itemRef = itemCell.item;\n\n      // G.players[ctx.currentPlayer].inventory.push(itemsArray[id]);\n\n      if (G.currentEvent.eventReward.type === \"item\") {\n        G.players[ctx.currentPlayer].inventory.push(G.currentEvent.eventReward.item.name);\n      }\n      if (G.currentEvent.eventReward.type === \"buff\") {\n        G.players[ctx.currentPlayer].buffs.push(G.currentEvent.eventReward.buff);\n      }\n    },\n    // use item function\n\n    useItem: (_ref7, item) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref7;\n      console.log(\"use item function\");\n      switch (item) {\n        case \"Staff of MoMoney\":\n          G.players[ctx.currentPlayer].currency += Math.random() * 5;\n          break;\n        case \"Staff of NoMoney\":\n          G.players[ctx.currentPlayer].currency -= Math.random() * 5;\n          break;\n        case \"Orb of MoMoney\":\n          G.players[ctx.currentPlayer].buffs.push({\n            name: \"Buff of Mo Money\",\n            duration: 3\n          });\n          break;\n      }\n      const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n      G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n    },\n    // apply buff function\n\n    applyBuff: (_ref8, playerId, buffType, duration) => {\n      let {\n        G,\n        ctx\n      } = _ref8;\n      G.players[ctx.currentPlayer].buffs.push({\n        type: buffType,\n        duration: duration\n      });\n    }\n  },\n  phases: {\n    rollScreen: {\n      start: true\n    },\n    eventOrItemScreen: {},\n    useItemScreen: {},\n    eventScreen: {},\n    correctAnswerScreen: {},\n    wrongAnswerScreen: {},\n    endTurnScreen: {},\n    pickUpItemScreen: {},\n    itemEffectResultScreen: {},\n    useItemOnPlayerScreen: {},\n    winngingScreen: {}\n  }\n};","map":{"version":3,"names":["TurnOrder","Client","Server","Game","react","UpwardMobilityBoard","eventsArray","itemsArray","buffsArray","UpwardsMobility","setup","players","position","inventory","buffs","currency","jobTitle","name","description","moveDist","jobTitles","currentEvent","board","turn","order","CONTINUE","moves","rollDice","_ref","G","ctx","events","die1","Math","floor","random","die2","currentPlayer","getId","currPlayToken","document","getElementById","console","log","style","top","calc","parseInt","toString","substring","disCalc","randomIndex","length","forEach","buff","index","duration","splice","eventReward","type","setPhase","addCurrency","_ref2","loseCurrency","_ref3","moveForward","_ref4","moveBackward","_ref5","pickUpItem","_ref6","push","item","useItem","_ref7","itemIndex","indexOf","applyBuff","_ref8","playerId","buffType","phases","rollScreen","start","eventOrItemScreen","useItemScreen","eventScreen","correctAnswerScreen","wrongAnswerScreen","endTurnScreen","pickUpItemScreen","itemEffectResultScreen","useItemOnPlayerScreen","winngingScreen"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Game.js"],"sourcesContent":["import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nimport {eventsArray, itemsArray, buffsArray} from \"./eventsfile\";\nexport const UpwardsMobility = {\n\n    // Turn phase flow\n    // 1) Roll dice move piece\n    // 2) Choose event or use item\n    // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n    // if correct answer than they pick up item and or gain currency then end turn\n    // if incorrect answer than negativeness happens then end turn\n    // 3b) If they choose the item, activate the item and do item thing and then show event\n\n    // rollScreen\n    // eventOrItemScreen\n    // itemScreen\n    // eventScreen\n    // correctAnswerScreen\n    // wrongAnswerScreen\n    // endTurnScreen\n\n    setup: () => ({\n        players: {\n            0: {\n                position: 0,\n                inventory: [\n                    // { name: \"Staff of MoMoney\", image: \"\", description: \"item 1 description\", onUse: \"You randomly generate between 0 and 10 coins\" },\n                    // { name: \"Staff of NoMoney\", image: \"\", description: \"item 2 description\", onUse: \"You randomly lose between 0 and 10 coins\" },\n                    // { name: \"Orb of MoMoney\", image: \"\", description: \"item 3 description\", onUse: \"You gain the buff of MoMoney for 3 turns.\" }\n                ],\n                buffs: [],\n                currency: 0,\n                jobTitle: {name: \"job title 1\", description: \"description for job title 1\"},\n\n            },\n            1: {\n                position: 0,\n                inventory: [\n                    // { name: \"Staff of MoMoney\", image: \"\", description: \"item 1 description\", onUse: \"You randomly generate between 0 and 10 coins\" },\n                    // { name: \"Staff of NoMoney\", image: \"\", description: \"item 2 description\", onUse: \"You randomly lose between 0 and 10 coins\" },\n                    // { name: \"Orb of MoMoney\", image: \"\", description: \"item 3 description\", onUse: \"You gain the buff of MoMoney for 3 turns.\" }\n                ],\n                buffs: [],\n                currency: 0,\n                jobTitle: {name: \"job title 1\", description: \"description for job title 1\"},\n\n            },\n            moveDist: 0,\n        },\n\n        jobTitles: [\n            {name: \"job title 1\", description: \"description for job title 1\"},\n            {name: \"job title 2\", description: \"description for job title 2\"},\n            {name: \"job title 3\", description: \"description for job title 3\"},\n            {name: \"job title 4\", description: \"description for job title 4\"},\n    ],\n\n        currentEvent: null,\n\n        board: {\n            0: { currency: 0 },\n            1: { currency: 2 },\n            2: { currency: 2 },\n            3: { currency: -1 },\n            4: { currency: 3 },\n            5: { currency: 5, },\n            6: { currency: 1 },\n            7: { currency: 0 },\n            8: { currency: 0 },\n            9: { currency: -2 },\n            10: { currency: 0 },\n            11: { currency: 0 },\n            12: { currency: 2 },\n            13: { currency: 2 },\n            14: { currency: -1 },\n            15: { currency: 3 },\n            16: { currency: -2 },\n            17: { currency: 1 },\n            18: { currency: 2 },\n            19: { currency: 0 },\n            20: { currency: -2 },\n            21: { currency: 2 },\n            22: { currency: -2 },\n            23: { currency: -2 },\n            24: { currency: 0 },\n            25: { currency: 0 },\n        },\n\n\n    }),\n    turn: {\n        order: TurnOrder.CONTINUE,\n    },\n\n    // Define the moves for rolling the dice and updating the game state.\n    moves: {\n        rollDice: ({G, ctx, events}) => {\n            const die1 = Math.floor(Math.random() * 6) + 1;\n            const die2 = Math.floor(Math.random() * 6) + 1;\n            let moveDist = die1 + die2;\n            G.moveDist = moveDist;\n            G.players[ctx.currentPlayer].position += moveDist;\n\n            let getId = \"playerToken\" + ctx.currentPlayer\n            let currPlayToken = document.getElementById(getId)\n            console.log(document.getElementById(\"playerToken\" + ctx.currentPlayer).style.top)\n            let calc = (parseInt(document.getElementById(getId).style.top.toString().substring(0,2)))\n            let disCalc = calc - (calc * (.025 * moveDist))\n            disCalc = disCalc + \"%\"\n            document.getElementById(getId).style.top = disCalc\n\n            if (G.players[ctx.currentPlayer].position >= 10 && G.players[ctx.currentPlayer].position % 10 === 0) {\n                const randomIndex = Math.floor(Math.random() * G.jobTitles.length);\n                G.players[ctx.currentPlayer].jobTitle = G.jobTitles[randomIndex];\n            }\n            if (G.players[ctx.currentPlayer].position >= 20 && G.players[ctx.currentPlayer].position % 20 === 0) {\n                const randomIndex = Math.floor(Math.random() * G.jobTitles.length);\n                G.players[ctx.currentPlayer].jobTitle = G.jobTitles[randomIndex];\n            }\n            if (G.players[ctx.currentPlayer].position >= 30 && G.players[ctx.currentPlayer].position % 30 === 0) {\n                const randomIndex = Math.floor(Math.random() * G.jobTitles.length);\n                G.players[ctx.currentPlayer].jobTitle = G.jobTitles[randomIndex];\n            }\n            if (G.players[ctx.currentPlayer].position >= 40 && G.players[ctx.currentPlayer].position % 40 === 0) {\n                const randomIndex = Math.floor(Math.random() * G.jobTitles.length);\n                G.players[ctx.currentPlayer].jobTitle = G.jobTitles[randomIndex];\n            }\n\n            // Check for players active buffs\n            // G.players[ctx.currentPlayer].buffs.forEach((buff) => {\n            //     if (buff.type === \"moMoneyBuff\") {\n            //         moveDist += 1;\n            //         buff.duration--;\n            //         if (buff.duration === 0) {\n            //             G.players[ctx.currentPlayer].buffs.splice(\n            //                 G.players[ctx.currentPlayer].buffs.indexOf(buff),\n            //                 1\n            //             );\n            //         }\n            //     }\n            // });\n\n\n            G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\n                switch (buff.name) {\n                    case \"Buff of Mo Money\":\n                        G.players[ctx.currentPlayer].currency += 2;\n                        buff.duration--;\n\n                        if (buff.duration === 0) {\n                            G.players[ctx.currentPlayer].buffs.splice(index, 1);\n                        }\n                        break;\n                }\n            });\n\n            G.currentEvent = eventsArray[Math.floor(Math.random() * eventsArray.length)];\n\n            console.log(\"current event reward type: \", G.currentEvent.eventReward.type)\n\n            events.setPhase(\"eventOrItemScreen\");\n        },\n\n        addCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency += currency;\n        },\n\n        loseCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency -= currency;\n        },\n\n        moveForward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position += moveDist;\n        },\n\n        moveBackward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position -= moveDist;\n        },\n\n        pickUpItem: ({G, ctx, events}, name) => {\n            // const itemCell = G.board[G.players[ctx.currentPlayer].position];\n            // const itemRef = itemCell.item;\n\n            // G.players[ctx.currentPlayer].inventory.push(itemsArray[id]);\n\n            if (G.currentEvent.eventReward.type === \"item\") {\n                G.players[ctx.currentPlayer].inventory.push(G.currentEvent.eventReward.item.name);\n            }\n            if (G.currentEvent.eventReward.type === \"buff\") {\n                G.players[ctx.currentPlayer].buffs.push(G.currentEvent.eventReward.buff);\n            }\n\n        },\n\n        // use item function\n\n        useItem: ({G, ctx, events}, item) => {\n\n            console.log(\"use item function\");\n\n            switch (item) {\n                case \"Staff of MoMoney\":\n                    G.players[ctx.currentPlayer].currency += Math.random() * 5;\n                    break;\n                case \"Staff of NoMoney\":\n                    G.players[ctx.currentPlayer].currency -= Math.random() * 5;\n                    break;\n                case \"Orb of MoMoney\":\n                    G.players[ctx.currentPlayer].buffs.push({name: \"Buff of Mo Money\", duration: 3});\n                    break;\n            }\n\n\n            const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n            G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n\n        },\n\n        // apply buff function\n\n        applyBuff: ({ G, ctx }, playerId, buffType, duration) => {\n            G.players[ctx.currentPlayer].buffs.push({ type: buffType, duration: duration });\n        },\n\n    },\n    phases: {\n        rollScreen: {\n            start: true\n        },\n        eventOrItemScreen: {\n\n        },\n        useItemScreen: {\n\n        },\n        eventScreen: {\n\n        },\n        correctAnswerScreen: {\n\n        },\n        wrongAnswerScreen: {\n\n        },\n        endTurnScreen: {\n\n        },\n        pickUpItemScreen: {\n\n        },\n        itemEffectResultScreen: {\n\n        },\n        useItemOnPlayerScreen: {\n\n        },\n        winngingScreen: {\n\n        }\n    },\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}