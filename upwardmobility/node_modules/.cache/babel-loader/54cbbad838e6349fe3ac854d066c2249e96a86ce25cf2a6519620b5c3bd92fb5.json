{"ast":null,"code":"import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nimport { eventsArray, itemsArray, buffsArray } from \"./eventsfile\";\nexport const UpwardsMobility = {\n  // Turn phase flow\n  // 1) Roll dice move piece\n  // 2) Choose event or use item\n  // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n  // if correct answer than they pick up item and or gain currency then end turn\n  // if incorrect answer than negativeness happens then end turn\n  // 3b) If they choose the item, activate the item and do item thing and then show event\n\n  // rollScreen\n  // eventOrItemScreen\n  // itemScreen\n  // eventScreen\n  // correctAnswerScreen\n  // wrongAnswerScreen\n  // endTurnScreen\n\n  setup: () => ({\n    players: {\n      0: {\n        position: 0,\n        inventory: [{\n          name: \"item 1\",\n          image: \"\",\n          description: \"item 1 description\"\n        }, {\n          name: \"item 2\",\n          image: \"\",\n          description: \"item 2 description\"\n        }, {\n          name: \"item 3\",\n          image: \"\",\n          description: \"item 3 description\"\n        }],\n        buffs: [],\n        currency: 0\n      },\n      1: {\n        position: 0,\n        inventory: [{\n          name: \"item 4\",\n          image: \"\",\n          description: \"item 4 description\"\n        }, {\n          name: \"item 5\",\n          image: \"\",\n          description: \"item 5 description\"\n        }, {\n          name: \"item 6\",\n          image: \"\",\n          description: \"item 6 description\"\n        }],\n        buffs: [],\n        currency: 0\n      },\n      moveDist: 0\n    },\n    currentEvent: null,\n    board: {\n      0: {\n        currency: 0\n      },\n      1: {\n        currency: 2\n      },\n      2: {\n        currency: 2\n      },\n      3: {\n        currency: -1\n      },\n      4: {\n        currency: 3\n      },\n      5: {\n        currency: 5\n      },\n      6: {\n        currency: 1\n      },\n      7: {\n        currency: 0\n      },\n      8: {\n        currency: 0\n      },\n      9: {\n        currency: -2\n      },\n      10: {\n        currency: 0\n      },\n      11: {\n        currency: 0\n      },\n      12: {\n        currency: 2\n      },\n      13: {\n        currency: 2\n      },\n      14: {\n        currency: -1\n      },\n      15: {\n        currency: 3\n      },\n      16: {\n        currency: -2\n      },\n      17: {\n        currency: 1\n      },\n      18: {\n        currency: 2\n      },\n      19: {\n        currency: 0\n      },\n      20: {\n        currency: -2\n      },\n      21: {\n        currency: 2\n      },\n      22: {\n        currency: -2\n      },\n      23: {\n        currency: -2\n      },\n      24: {\n        currency: 0\n      },\n      25: {\n        currency: 0\n      }\n    }\n  }),\n  turn: {\n    order: TurnOrder.CONTINUE\n  },\n  // Define the moves for rolling the dice and updating the game state.\n  moves: {\n    rollDice: _ref => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref;\n      const die1 = Math.floor(Math.random() * 6) + 1;\n      const die2 = Math.floor(Math.random() * 6) + 1;\n      let moveDist = die1 + die2;\n      G.moveDist = moveDist;\n      G.players[ctx.currentPlayer].position += moveDist;\n\n      // Check for players active buffs\n      // G.players[ctx.currentPlayer].buffs.forEach((buff) => {\n      //     if (buff.type === \"moMoneyBuff\") {\n      //         moveDist += 1;\n      //         buff.duration--;\n      //         if (buff.duration === 0) {\n      //             G.players[ctx.currentPlayer].buffs.splice(\n      //                 G.players[ctx.currentPlayer].buffs.indexOf(buff),\n      //                 1\n      //             );\n      //         }\n      //     }\n      // });\n\n      G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\n        switch (buff.name) {\n          case \"Buff of Mo Money\":\n            G.players[ctx.currentPlayer].currency += 2;\n            buff.duration--;\n            if (buff.duration === 0) {\n              G.players[ctx.currentPlayer].buffs.splice(index, 1);\n            }\n            break;\n        }\n      });\n      G.currentEvent = eventsArray[Math.floor(Math.random() * eventsArray.length)];\n      console.log(\"current event reward type: \", G.currentEvent.eventReward.type);\n      if (G.currentEvent.eventReward.type === \"item\") {\n        G.players[ctx.currentPlayer].inventory.push(G.currentEvent.eventReward.item.name);\n      }\n      if (G.currentEvent.eventReward.type === \"buff\") {\n        G.players[ctx.currentPlayer].buffs.push(G.currentEvent.eventReward.buff);\n      }\n      events.setPhase(\"eventOrItemScreen\");\n    },\n    addCurrency: (_ref2, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref2;\n      G.players[ctx.currentPlayer].currency += currency;\n    },\n    loseCurrency: (_ref3, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref3;\n      G.players[ctx.currentPlayer].currency -= currency;\n    },\n    moveForward: (_ref4, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref4;\n      G.players[ctx.currentPlayer].position += moveDist;\n    },\n    moveBackward: (_ref5, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref5;\n      G.players[ctx.currentPlayer].position -= moveDist;\n    },\n    // pickUpItem: ({G, ctx, events}, id) => {\n    //     // const itemCell = G.board[G.players[ctx.currentPlayer].position];\n    //     // const itemRef = itemCell.item;\n    //\n    //     G.players[ctx.currentPlayer].inventory.push(itemsArray[id]);\n    //\n    // },\n\n    // use item function\n\n    useItem: (_ref6, item) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref6;\n      console.log(\"use item function\");\n      switch (item) {\n        case \"Staff of MoMoney\":\n          G.players[ctx.currentPlayer].currency += Math.random() * 5;\n          break;\n      }\n      const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n      G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n    },\n    // apply buff function\n\n    applyBuff: (_ref7, playerId, buffType, duration) => {\n      let {\n        G,\n        ctx\n      } = _ref7;\n      G.players[ctx.currentPlayer].buffs.push({\n        type: buffType,\n        duration: duration\n      });\n    }\n  },\n  phases: {\n    rollScreen: {\n      start: true\n    },\n    eventOrItemScreen: {},\n    useItemScreen: {},\n    eventScreen: {},\n    correctAnswerScreen: {},\n    wrongAnswerScreen: {},\n    endTurnScreen: {},\n    pickUpItemScreen: {}\n  }\n};","map":{"version":3,"names":["TurnOrder","Client","Server","Game","react","UpwardMobilityBoard","eventsArray","itemsArray","buffsArray","UpwardsMobility","setup","players","position","inventory","name","image","description","buffs","currency","moveDist","currentEvent","board","turn","order","CONTINUE","moves","rollDice","_ref","G","ctx","events","die1","Math","floor","random","die2","currentPlayer","forEach","buff","index","duration","splice","length","console","log","eventReward","type","push","item","setPhase","addCurrency","_ref2","loseCurrency","_ref3","moveForward","_ref4","moveBackward","_ref5","useItem","_ref6","itemIndex","indexOf","applyBuff","_ref7","playerId","buffType","phases","rollScreen","start","eventOrItemScreen","useItemScreen","eventScreen","correctAnswerScreen","wrongAnswerScreen","endTurnScreen","pickUpItemScreen"],"sources":["C:/Users/Justin Neigh/WebstormProjects/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend/upwardmobility/src/Game.js"],"sourcesContent":["import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\r\nimport react from 'react';\r\nimport { UpwardMobilityBoard } from \"./Board\";\r\nimport {eventsArray, itemsArray, buffsArray} from \"./eventsfile\";\r\nexport const UpwardsMobility = {\r\n\r\n    // Turn phase flow\r\n    // 1) Roll dice move piece\r\n    // 2) Choose event or use item\r\n    // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\r\n    // if correct answer than they pick up item and or gain currency then end turn\r\n    // if incorrect answer than negativeness happens then end turn\r\n    // 3b) If they choose the item, activate the item and do item thing and then show event\r\n\r\n    // rollScreen\r\n    // eventOrItemScreen\r\n    // itemScreen\r\n    // eventScreen\r\n    // correctAnswerScreen\r\n    // wrongAnswerScreen\r\n    // endTurnScreen\r\n\r\n    setup: () => ({\r\n        players: {\r\n            0: {\r\n                position: 0,\r\n                inventory: [\r\n                    { name: \"item 1\", image: \"\", description: \"item 1 description\" },\r\n                    { name: \"item 2\", image: \"\", description: \"item 2 description\" },\r\n                    { name: \"item 3\", image: \"\", description: \"item 3 description\" }\r\n                ],\r\n                buffs: [],\r\n                currency: 0,\r\n            },\r\n            1: {\r\n                position: 0,\r\n                inventory: [\r\n                    { name: \"item 4\", image: \"\", description: \"item 4 description\" },\r\n                    { name: \"item 5\", image: \"\", description: \"item 5 description\" },\r\n                    { name: \"item 6\", image: \"\", description: \"item 6 description\" }\r\n                ],\r\n                buffs: [],\r\n                currency: 0,\r\n            },\r\n            moveDist: 0,\r\n        },\r\n\r\n        currentEvent: null,\r\n\r\n        board: {\r\n            0: { currency: 0 },\r\n            1: { currency: 2 },\r\n            2: { currency: 2 },\r\n            3: { currency: -1 },\r\n            4: { currency: 3 },\r\n            5: { currency: 5, },\r\n            6: { currency: 1 },\r\n            7: { currency: 0 },\r\n            8: { currency: 0 },\r\n            9: { currency: -2 },\r\n            10: { currency: 0 },\r\n            11: { currency: 0 },\r\n            12: { currency: 2 },\r\n            13: { currency: 2 },\r\n            14: { currency: -1 },\r\n            15: { currency: 3 },\r\n            16: { currency: -2 },\r\n            17: { currency: 1 },\r\n            18: { currency: 2 },\r\n            19: { currency: 0 },\r\n            20: { currency: -2 },\r\n            21: { currency: 2 },\r\n            22: { currency: -2 },\r\n            23: { currency: -2 },\r\n            24: { currency: 0 },\r\n            25: { currency: 0 },\r\n        },\r\n\r\n\r\n    }),\r\n    turn: {\r\n        order: TurnOrder.CONTINUE,\r\n    },\r\n\r\n    // Define the moves for rolling the dice and updating the game state.\r\n    moves: {\r\n        rollDice: ({G, ctx, events}) => {\r\n            const die1 = Math.floor(Math.random() * 6) + 1;\r\n            const die2 = Math.floor(Math.random() * 6) + 1;\r\n            let moveDist = die1 + die2;\r\n            G.moveDist = moveDist;\r\n            G.players[ctx.currentPlayer].position += moveDist;\r\n\r\n            // Check for players active buffs\r\n            // G.players[ctx.currentPlayer].buffs.forEach((buff) => {\r\n            //     if (buff.type === \"moMoneyBuff\") {\r\n            //         moveDist += 1;\r\n            //         buff.duration--;\r\n            //         if (buff.duration === 0) {\r\n            //             G.players[ctx.currentPlayer].buffs.splice(\r\n            //                 G.players[ctx.currentPlayer].buffs.indexOf(buff),\r\n            //                 1\r\n            //             );\r\n            //         }\r\n            //     }\r\n            // });\r\n\r\n            G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\r\n                switch (buff.name) {\r\n                    case \"Buff of Mo Money\":\r\n                        G.players[ctx.currentPlayer].currency += 2;\r\n                        buff.duration--;\r\n\r\n                        if (buff.duration === 0) {\r\n                            G.players[ctx.currentPlayer].buffs.splice(index, 1);\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n\r\n            G.currentEvent = eventsArray[Math.floor(Math.random() * eventsArray.length)];\r\n\r\n            console.log(\"current event reward type: \", G.currentEvent.eventReward.type)\r\n\r\n            if (G.currentEvent.eventReward.type === \"item\") {\r\n                G.players[ctx.currentPlayer].inventory.push(G.currentEvent.eventReward.item.name);\r\n            }\r\n            if (G.currentEvent.eventReward.type === \"buff\") {\r\n                G.players[ctx.currentPlayer].buffs.push(G.currentEvent.eventReward.buff);\r\n            }\r\n\r\n            events.setPhase(\"eventOrItemScreen\");\r\n        },\r\n\r\n        addCurrency: ({G, ctx, events}, currency) => {\r\n            G.players[ctx.currentPlayer].currency += currency;\r\n        },\r\n\r\n        loseCurrency: ({G, ctx, events}, currency) => {\r\n            G.players[ctx.currentPlayer].currency -= currency;\r\n        },\r\n\r\n        moveForward: ({G, ctx, events}, moveDist) => {\r\n            G.players[ctx.currentPlayer].position += moveDist;\r\n        },\r\n\r\n        moveBackward: ({G, ctx, events}, moveDist) => {\r\n            G.players[ctx.currentPlayer].position -= moveDist;\r\n        },\r\n\r\n        // pickUpItem: ({G, ctx, events}, id) => {\r\n        //     // const itemCell = G.board[G.players[ctx.currentPlayer].position];\r\n        //     // const itemRef = itemCell.item;\r\n        //\r\n        //     G.players[ctx.currentPlayer].inventory.push(itemsArray[id]);\r\n        //\r\n        // },\r\n\r\n        // use item function\r\n\r\n        useItem: ({G, ctx, events}, item) => {\r\n\r\n            console.log(\"use item function\");\r\n\r\n            switch (item) {\r\n                case \"Staff of MoMoney\":\r\n                    G.players[ctx.currentPlayer].currency += Math.random() * 5;\r\n                    break;\r\n            }\r\n\r\n            const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\r\n            G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\r\n\r\n        },\r\n\r\n        // apply buff function\r\n\r\n        applyBuff: ({ G, ctx }, playerId, buffType, duration) => {\r\n            G.players[ctx.currentPlayer].buffs.push({ type: buffType, duration: duration });\r\n        },\r\n\r\n    },\r\n    phases: {\r\n        rollScreen: {\r\n            start: true\r\n        },\r\n        eventOrItemScreen: {\r\n\r\n        },\r\n        useItemScreen: {\r\n\r\n        },\r\n        eventScreen: {\r\n\r\n        },\r\n        correctAnswerScreen: {\r\n\r\n        },\r\n        wrongAnswerScreen: {\r\n\r\n        },\r\n        endTurnScreen: {\r\n\r\n        },\r\n        pickUpItemScreen: {\r\n\r\n        }\r\n    },\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}