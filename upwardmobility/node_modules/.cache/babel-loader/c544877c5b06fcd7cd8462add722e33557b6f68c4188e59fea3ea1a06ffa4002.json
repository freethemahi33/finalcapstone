{"ast":null,"code":"import { TurnOrder } from \"boardgame.io/core\";\nimport montyPythonImage from \"./monypython.png\";\nimport React from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nimport { eventsArray } from \"./eventsfile\";\nimport { itemsArray } from \"./itemsFile\";\nimport buriedTreasure from \"./buriedtreasure.avif\";\nexport const UpwardsMobility = {\n  setup: () => ({\n    players: {\n      0: {\n        position: 0,\n        inventory: [],\n        buffs: [],\n        currency: 50,\n        jobTitle: \"Starting job title\",\n        jobTitleDescription: \"Starting job description\",\n        selectedOption: -1\n      },\n      1: {\n        position: 0,\n        inventory: [],\n        buffs: [],\n        currency: 0,\n        jobTitle: \"Starting job title\",\n        jobTitleDescription: \"Starting job title description\",\n        selectedOption: -1\n      },\n      moveDist: 0\n    },\n    jobTitles: [{\n      name: \"job title 1\",\n      description: \"description for job title 1\",\n      previouslyHeldBy: []\n    }, {\n      name: \"job title 2\",\n      description: \"description for job title 2\",\n      previouslyHeldBy: []\n    }, {\n      name: \"job title 3\",\n      description: \"description for job title 3\",\n      previouslyHeldBy: []\n    }, {\n      name: \"job title 4\",\n      description: \"description for job title 4\",\n      previouslyHeldBy: []\n    }],\n    currentEvent: null,\n    lastEvent: null\n  }),\n  turn: {\n    order: TurnOrder.CONTINUE\n  },\n  // Define the moves for rolling the dice and updating the game state.\n  moves: {\n    rollDice: _ref => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref;\n      const die1 = Math.floor(Math.random() * 6) + 1;\n      const die2 = Math.floor(Math.random() * 6) + 1;\n      let moveDist = die1 + die2;\n      G.moveDist = moveDist;\n      G.players[ctx.currentPlayer].position += moveDist;\n      let getId = \"playerToken\" + ctx.currentPlayer;\n      console.log(getId);\n      let currPlayToken = document.getElementById(getId);\n      console.log(currPlayToken);\n      console.log(document.getElementById(getId).style);\n      let calc = parseInt(document.getElementById(getId).style.top.toString().substring(0, 2));\n      let disCalc = calc - calc * (.025 * moveDist);\n      disCalc = disCalc + \"%\";\n      document.getElementById(getId).style.top = disCalc;\n      console.log(\"Player position: \" + G.players[ctx.currentPlayer].position);\n      const player = G.players[ctx.currentPlayer];\n      if (player.position >= 10 && player.position <= 20) {\n        console.log(\"Inside of job title check 10 - 20. Player position: \" + player.position);\n        // Choose a random job title from the list that the player has not held before\n        let availableJobTitles = G.jobTitles.filter(jobTitle => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\n        if (availableJobTitles.length === 0) {\n          availableJobTitles = G.jobTitles;\n        }\n        const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\n        const jobTitle = availableJobTitles[jobTitleIndex];\n        player.jobTitle = jobTitle.name;\n        player.jobTitleDescription = jobTitle.description;\n        jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\n      }\n      if (player.position >= 20 && player.position <= 30) {\n        console.log(\"Inside of job title check 20 - 30. Player position: \" + player.position);\n        let availableJobTitles = G.jobTitles.filter(jobTitle => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\n        if (availableJobTitles.length === 0) {\n          availableJobTitles = G.jobTitles;\n        }\n        const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\n        const jobTitle = availableJobTitles[jobTitleIndex];\n        player.jobTitle = jobTitle.name;\n        player.jobTitleDescription = jobTitle.description;\n        jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\n      }\n      if (player.position >= 30 && player.position <= 40) {\n        console.log(\"Inside of job title check 30 - 40. Player position: \" + player.position);\n        let availableJobTitles = G.jobTitles.filter(jobTitle => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\n        if (availableJobTitles.length === 0) {\n          availableJobTitles = G.jobTitles;\n        }\n        const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\n        const jobTitle = availableJobTitles[jobTitleIndex];\n        player.jobTitle = jobTitle.name;\n        player.jobTitleDescription = jobTitle.description;\n        jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\n      }\n      if (player.position >= 40 && player.position <= 50) {\n        console.log(\"Inside of job title check 40 - 50. Player position: \" + player.position);\n        let availableJobTitles = G.jobTitles.filter(jobTitle => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\n        if (availableJobTitles.length === 0) {\n          availableJobTitles = G.jobTitles;\n        }\n        const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\n        const jobTitle = availableJobTitles[jobTitleIndex];\n        player.jobTitle = jobTitle.name;\n        player.jobTitleDescription = jobTitle.description;\n        jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\n      }\n      console.log(\"Current player job title : \" + G.players[ctx.currentPlayer].jobTitle);\n      G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\n        switch (buff.name) {\n          case \"Buff of Mo Money\":\n            G.players[ctx.currentPlayer].currency += 2;\n            buff.duration--;\n            if (buff.duration === 0) {\n              G.players[ctx.currentPlayer].buffs.splice(index, 1);\n            }\n            break;\n        }\n      });\n      const availableEvents = eventsArray.filter(event => event !== G.lastEvent);\n      const randomEventIndex = Math.floor(Math.random() * availableEvents.length);\n      G.currentEvent = availableEvents[randomEventIndex];\n      console.log(\"Current event: \" + G.currentEvent.id);\n      // console.log(\"Last event: \" + G.lastEvent.id)\n      G.lastEvent = G.currentEvent;\n      events.setPhase(\"eventOrItemScreen\");\n    },\n    addCurrency: (_ref2, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref2;\n      G.players[ctx.currentPlayer].currency += currency;\n    },\n    subtractCurrency: (_ref3, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref3;\n      G.players[ctx.currentPlayer].currency -= currency;\n      if (G.players[ctx.currentPlayer].currency < 0) {\n        G.players[ctx.currentPlayer].currency = 0;\n      }\n    },\n    moveForward: (_ref4, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref4;\n      G.players[ctx.currentPlayer].position += moveDist;\n    },\n    moveBackward: (_ref5, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref5;\n      G.players[ctx.currentPlayer].position -= moveDist;\n    },\n    // updated event response\n\n    selectAnswer(_ref6, answerIndex) {\n      let {\n        G,\n        ctx\n      } = _ref6;\n      G.players[ctx.currentPlayer].selectedOption = answerIndex;\n    },\n    pickUpItem: (_ref7, obj) => {\n      let {\n        G,\n        ctx\n      } = _ref7;\n      // console.log(\"Inside of pickUpItem function. Object: \" + obj.type)\n      console.log(obj);\n      if (obj.type === \"item\") {\n        G.players[ctx.currentPlayer].inventory.push(obj.item);\n      }\n      if (obj.type === \"buff\") {\n        G.players[ctx.currentPlayer].buffs.push(obj.buff);\n      }\n      if (obj.type === \"nothing\") {\n        console.log(\"Nothing happened\");\n      }\n      if (obj.type === \"both\") {\n        console.log(\"both item and buff will be pushed here\");\n      }\n    },\n    pickUpItemFromStore: (_ref8, obj) => {\n      let {\n        G,\n        ctx\n      } = _ref8;\n      G.players[ctx.currentPlayer].inventory.push(obj);\n    },\n    eventResponse: (_ref9, eventEffect) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref9;\n      switch (eventEffect) {\n        case \"effectResponse1\":\n          G.players[ctx.currentPlayer].currency += 3;\n          console.log(\"Inside of move switch case for response 1\");\n          break;\n        case \"effectResponse2\":\n          G.players[ctx.currentPlayer].currency += 4;\n          const tempPosition = G.players[ctx.currentPlayer].position;\n          console.log(\"Inside of move switch case for response 2\");\n          break;\n        case \"effectResponse3\":\n          G.players[ctx.currentPlayer].currency += 5;\n          console.log(\"Inside of move switch case for response 3\");\n          break;\n        case \"insufficientFundsEffect\":\n          console.log(\"Inside of insufficient funds switch case\");\n          break;\n        case \"nightMarketStore\":\n          events.setPhase(\"nightMarketScreen\");\n          console.log(\"Inside of night market store switch case\");\n          break;\n      }\n    },\n    // use item function\n\n    useItem: (_ref10, item) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref10;\n      console.log(\"use item function\");\n      switch (item) {\n        case \"Staff of MoMoney\":\n          G.players[ctx.currentPlayer].currency += Math.random() * 5;\n          break;\n        case \"Staff of NoMoney\":\n          G.players[ctx.currentPlayer].currency -= Math.random() * 5;\n          break;\n        case \"Orb of MoMoney\":\n          G.players[ctx.currentPlayer].buffs.push({\n            name: \"Buff of Mo Money\",\n            image: buriedTreasure,\n            description: \"Description of buff\",\n            duration: 5\n          });\n          break;\n      }\n      const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n      G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n    }\n\n    // apply buff function\n\n    // applyBuff: ({ G, ctx }, playerId, buffType, duration) => {\n    //     G.players[ctx.currentPlayer].buffs.push({ type: buffType, duration: duration });\n    // },\n  },\n\n  phases: {\n    rollScreen: {\n      start: true\n    },\n    eventOrItemScreen: {},\n    useItemScreen: {},\n    eventScreen: {},\n    correctAnswerScreen: {},\n    wrongAnswerScreen: {},\n    endTurnScreen: {},\n    pickUpItemScreen: {},\n    itemEffectResultScreen: {},\n    useItemOnPlayerScreen: {},\n    winningGameScreen: {},\n    eventResponseScreen: {},\n    eventResponseScreen2: {},\n    insufficientFundsScreen: {},\n    visitShopScreen: {},\n    successfulPurchaseScreen: {},\n    unsuccessfulPurchaseScreen: {},\n    proceedToEventScreen: {},\n    nightMarketScreen: {}\n  }\n};","map":{"version":3,"names":["TurnOrder","montyPythonImage","React","UpwardMobilityBoard","eventsArray","itemsArray","buriedTreasure","UpwardsMobility","setup","players","position","inventory","buffs","currency","jobTitle","jobTitleDescription","selectedOption","moveDist","jobTitles","name","description","previouslyHeldBy","currentEvent","lastEvent","turn","order","CONTINUE","moves","rollDice","_ref","G","ctx","events","die1","Math","floor","random","die2","currentPlayer","getId","console","log","currPlayToken","document","getElementById","style","calc","parseInt","top","toString","substring","disCalc","player","availableJobTitles","filter","includes","length","jobTitleIndex","push","forEach","buff","index","duration","splice","availableEvents","event","randomEventIndex","id","setPhase","addCurrency","_ref2","subtractCurrency","_ref3","moveForward","_ref4","moveBackward","_ref5","selectAnswer","_ref6","answerIndex","pickUpItem","_ref7","obj","type","item","pickUpItemFromStore","_ref8","eventResponse","_ref9","eventEffect","tempPosition","useItem","_ref10","image","itemIndex","indexOf","phases","rollScreen","start","eventOrItemScreen","useItemScreen","eventScreen","correctAnswerScreen","wrongAnswerScreen","endTurnScreen","pickUpItemScreen","itemEffectResultScreen","useItemOnPlayerScreen","winningGameScreen","eventResponseScreen","eventResponseScreen2","insufficientFundsScreen","visitShopScreen","successfulPurchaseScreen","unsuccessfulPurchaseScreen","proceedToEventScreen","nightMarketScreen"],"sources":["D:/School/488_CMPSC/final_capstone/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend/upwardmobility/src/Game.js"],"sourcesContent":["import { TurnOrder } from \"boardgame.io/core\";\r\nimport montyPythonImage from \"./monypython.png\";\r\nimport React from 'react';\r\nimport { UpwardMobilityBoard } from \"./Board\";\r\nimport { eventsArray } from \"./eventsfile\";\r\nimport { itemsArray } from \"./itemsFile\";\r\nimport buriedTreasure from \"./buriedtreasure.avif\";\r\n\r\n\r\n\r\nexport const UpwardsMobility = {\r\n\r\n    setup: () => ({\r\n        players: {\r\n            0: {\r\n                position: 0,\r\n                inventory: [\r\n                ],\r\n                buffs: [],\r\n                currency: 50,\r\n                jobTitle: \"Starting job title\",\r\n                jobTitleDescription: \"Starting job description\",\r\n                selectedOption: -1,\r\n\r\n            },\r\n            1: {\r\n                position: 0,\r\n                inventory: [\r\n                ],\r\n                buffs: [],\r\n                currency: 0,\r\n                jobTitle: \"Starting job title\",\r\n                jobTitleDescription: \"Starting job title description\",\r\n                selectedOption: -1,\r\n\r\n            },\r\n            moveDist: 0,\r\n        },\r\n\r\n        jobTitles: [\r\n            {name: \"job title 1\", description: \"description for job title 1\", previouslyHeldBy: []},\r\n            {name: \"job title 2\", description: \"description for job title 2\", previouslyHeldBy: []},\r\n            {name: \"job title 3\", description: \"description for job title 3\", previouslyHeldBy: []},\r\n            {name: \"job title 4\", description: \"description for job title 4\", previouslyHeldBy: []},\r\n    ],\r\n\r\n        currentEvent: null,\r\n        lastEvent: null,\r\n\r\n    }),\r\n    turn: {\r\n        order: TurnOrder.CONTINUE,\r\n    },\r\n\r\n    // Define the moves for rolling the dice and updating the game state.\r\n    moves: {\r\n        rollDice: ({G, ctx, events}) => {\r\n            const die1 = Math.floor(Math.random() * 6) + 1;\r\n            const die2 = Math.floor(Math.random() * 6) + 1;\r\n            let moveDist = die1 + die2;\r\n            G.moveDist = moveDist;\r\n            G.players[ctx.currentPlayer].position += moveDist;\r\n\r\n            let getId = \"playerToken\" + ctx.currentPlayer\r\n            console.log(getId)\r\n            let currPlayToken = document.getElementById(getId)\r\n            console.log(currPlayToken)\r\n            console.log(document.getElementById(getId).style)\r\n            let calc = (parseInt(document.getElementById(getId).style.top.toString().substring(0,2)))\r\n            let disCalc = calc - (calc * (.025 * moveDist))\r\n            disCalc = disCalc + \"%\"\r\n            document.getElementById(getId).style.top = disCalc\r\n\r\n            console.log(\"Player position: \" + G.players[ctx.currentPlayer].position)\r\n\r\n            const player = G.players[ctx.currentPlayer];\r\n            if (player.position >= 10 && player.position <= 20) {\r\n                console.log(\"Inside of job title check 10 - 20. Player position: \" + player.position)\r\n                // Choose a random job title from the list that the player has not held before\r\n                let availableJobTitles = G.jobTitles.filter((jobTitle) => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\r\n                if (availableJobTitles.length === 0) {\r\n                    availableJobTitles = G.jobTitles;\r\n                }\r\n                const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\r\n                const jobTitle = availableJobTitles[jobTitleIndex];\r\n                player.jobTitle = jobTitle.name;\r\n                player.jobTitleDescription = jobTitle.description;\r\n                jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\r\n            }\r\n            if (player.position >= 20 && player.position <= 30) {\r\n                console.log(\"Inside of job title check 20 - 30. Player position: \" + player.position)\r\n                let availableJobTitles = G.jobTitles.filter((jobTitle) => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\r\n                if (availableJobTitles.length === 0) {\r\n                    availableJobTitles = G.jobTitles;\r\n                }\r\n                const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\r\n                const jobTitle = availableJobTitles[jobTitleIndex];\r\n                player.jobTitle = jobTitle.name;\r\n                player.jobTitleDescription = jobTitle.description;\r\n                jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\r\n            }\r\n            if (player.position >= 30 && player.position <= 40) {\r\n                console.log(\"Inside of job title check 30 - 40. Player position: \" + player.position)\r\n                let availableJobTitles = G.jobTitles.filter((jobTitle) => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\r\n                if (availableJobTitles.length === 0) {\r\n                    availableJobTitles = G.jobTitles;\r\n                }\r\n                const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\r\n                const jobTitle = availableJobTitles[jobTitleIndex];\r\n                player.jobTitle = jobTitle.name;\r\n                player.jobTitleDescription = jobTitle.description;\r\n                jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\r\n            }\r\n            if (player.position >= 40 && player.position <= 50) {\r\n                console.log(\"Inside of job title check 40 - 50. Player position: \" + player.position)\r\n                let availableJobTitles = G.jobTitles.filter((jobTitle) => !jobTitle.previouslyHeldBy.includes(ctx.currentPlayer));\r\n                if (availableJobTitles.length === 0) {\r\n                    availableJobTitles = G.jobTitles;\r\n                }\r\n                const jobTitleIndex = Math.floor(Math.random() * availableJobTitles.length);\r\n                const jobTitle = availableJobTitles[jobTitleIndex];\r\n                player.jobTitle = jobTitle.name;\r\n                player.jobTitleDescription = jobTitle.description;\r\n                jobTitle.previouslyHeldBy.push(ctx.currentPlayer);\r\n            }\r\n\r\n            console.log(\"Current player job title : \" + G.players[ctx.currentPlayer].jobTitle)\r\n\r\n\r\n            G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\r\n                switch (buff.name) {\r\n                    case \"Buff of Mo Money\":\r\n                        G.players[ctx.currentPlayer].currency += 2;\r\n\r\n                        buff.duration--;\r\n                        if (buff.duration === 0) {\r\n                            G.players[ctx.currentPlayer].buffs.splice(index, 1);\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n\r\n            const availableEvents = eventsArray.filter(event => event !== G.lastEvent);\r\n            const randomEventIndex = Math.floor(Math.random() * availableEvents.length);\r\n            G.currentEvent = availableEvents[randomEventIndex];\r\n            console.log(\"Current event: \" + G.currentEvent.id)\r\n            // console.log(\"Last event: \" + G.lastEvent.id)\r\n            G.lastEvent = G.currentEvent;\r\n            events.setPhase(\"eventOrItemScreen\");\r\n        },\r\n\r\n        addCurrency: ({G, ctx, events}, currency) => {\r\n            G.players[ctx.currentPlayer].currency += currency;\r\n        },\r\n\r\n        subtractCurrency: ({G, ctx, events}, currency) => {\r\n            G.players[ctx.currentPlayer].currency -= currency;\r\n            if (G.players[ctx.currentPlayer].currency < 0) {\r\n                G.players[ctx.currentPlayer].currency = 0;\r\n            }\r\n        },\r\n\r\n\r\n        moveForward: ({G, ctx, events}, moveDist) => {\r\n            G.players[ctx.currentPlayer].position += moveDist;\r\n        },\r\n\r\n        moveBackward: ({G, ctx, events}, moveDist) => {\r\n            G.players[ctx.currentPlayer].position -= moveDist;\r\n        },\r\n\r\n        // updated event response\r\n\r\n\r\n        selectAnswer({G, ctx}, answerIndex) {\r\n            G.players[ctx.currentPlayer].selectedOption = answerIndex;\r\n        },\r\n\r\n        pickUpItem: ({G, ctx}, obj) => {\r\n\r\n            // console.log(\"Inside of pickUpItem function. Object: \" + obj.type)\r\n            console.log(obj)\r\n\r\n            if (obj.type === \"item\") {\r\n                G.players[ctx.currentPlayer].inventory.push(obj.item);\r\n            }\r\n            if (obj.type === \"buff\") {\r\n                G.players[ctx.currentPlayer].buffs.push(obj.buff);\r\n            }\r\n            if (obj.type === \"nothing\") {\r\n                console.log(\"Nothing happened\")\r\n            }\r\n            if (obj.type === \"both\") {\r\n                console.log(\"both item and buff will be pushed here\")\r\n            }\r\n        },\r\n\r\n        pickUpItemFromStore: ({G, ctx}, obj) => {\r\n            G.players[ctx.currentPlayer].inventory.push(obj);\r\n        },\r\n\r\n        eventResponse: ({G, ctx, events}, eventEffect) => {\r\n\r\n            switch (eventEffect) {\r\n                case \"effectResponse1\":\r\n                    G.players[ctx.currentPlayer].currency += 3;\r\n                    console.log(\"Inside of move switch case for response 1\")\r\n                    break;\r\n                case \"effectResponse2\":\r\n                    G.players[ctx.currentPlayer].currency += 4;\r\n                    const tempPosition = G.players[ctx.currentPlayer].position;\r\n\r\n                    console.log(\"Inside of move switch case for response 2\")\r\n                    break;\r\n                case \"effectResponse3\":\r\n                    G.players[ctx.currentPlayer].currency += 5;\r\n                    console.log(\"Inside of move switch case for response 3\")\r\n                    break;\r\n                case \"insufficientFundsEffect\":\r\n                    console.log(\"Inside of insufficient funds switch case\")\r\n                    break;\r\n                case \"nightMarketStore\":\r\n                    events.setPhase(\"nightMarketScreen\");\r\n                    console.log(\"Inside of night market store switch case\")\r\n                    break;\r\n\r\n            }\r\n        },\r\n\r\n        // use item function\r\n\r\n        useItem: ({G, ctx, events}, item) => {\r\n\r\n            console.log(\"use item function\");\r\n\r\n            switch (item) {\r\n                case \"Staff of MoMoney\":\r\n                    G.players[ctx.currentPlayer].currency += Math.random() * 5;\r\n                    break;\r\n                case \"Staff of NoMoney\":\r\n                    G.players[ctx.currentPlayer].currency -= Math.random() * 5;\r\n                    break;\r\n                case \"Orb of MoMoney\":\r\n                    G.players[ctx.currentPlayer].buffs.push({ name: \"Buff of Mo Money\", image: buriedTreasure, description: \"Description of buff\", duration: 5 });\r\n                    break;\r\n            }\r\n\r\n\r\n            const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\r\n            G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\r\n\r\n        },\r\n\r\n        // apply buff function\r\n\r\n        // applyBuff: ({ G, ctx }, playerId, buffType, duration) => {\r\n        //     G.players[ctx.currentPlayer].buffs.push({ type: buffType, duration: duration });\r\n        // },\r\n\r\n    },\r\n    phases: {\r\n        rollScreen: {\r\n            start: true\r\n        },\r\n        eventOrItemScreen: {\r\n\r\n        },\r\n        useItemScreen: {\r\n\r\n        },\r\n        eventScreen: {\r\n\r\n        },\r\n        correctAnswerScreen: {\r\n\r\n        },\r\n        wrongAnswerScreen: {\r\n\r\n        },\r\n        endTurnScreen: {\r\n\r\n        },\r\n        pickUpItemScreen: {\r\n\r\n        },\r\n        itemEffectResultScreen: {\r\n\r\n        },\r\n        useItemOnPlayerScreen: {\r\n\r\n        },\r\n        winningGameScreen: {\r\n\r\n        },\r\n        eventResponseScreen: {\r\n\r\n        },\r\n        eventResponseScreen2: {\r\n\r\n        },\r\n        insufficientFundsScreen: {\r\n\r\n        },\r\n        visitShopScreen: {\r\n\r\n        },\r\n        successfulPurchaseScreen: {\r\n\r\n        },\r\n        unsuccessfulPurchaseScreen: {\r\n\r\n        },\r\n        proceedToEventScreen: {\r\n\r\n        },\r\n        nightMarketScreen: {\r\n\r\n        }\r\n    },\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}