{"ast":null,"code":"import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\nimport { eventsArray } from \"./eventsfile\";\n// import { getEvent} from \"./eventsfile\";\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nexport const UpwardsMobility = {\n  // Turn phase flow\n  // 1) Roll dice move piece\n  // 2) Choose event or use item\n  // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n  // if correct answer than they pick up item and or gain currency then end turn\n  // if incorrect answer than negativeness happens then end turn\n  // 3b) If they choose the item, activate the item and do item thing and then show event\n\n  // rollScreen\n  // eventOrItemScreen\n  // itemScreen\n  // eventScreen\n  // correctAnswerScreen\n  // wrongAnswerScreen\n  // endTurnScreen\n\n  setup: () => ({\n    players: {\n      0: {\n        position: 0,\n        inventory: ['Staff of MoMoney', 'Staff of NoMoney', 'Orb of Steal Yo Buffs'],\n        buffs: [],\n        currency: 0\n      },\n      1: {\n        position: 0,\n        inventory: ['Orb of MoMoney', 'Orb of NoMoney', 'Orb of Steal Yo Buffs'],\n        buffs: [],\n        currency: 0\n      },\n      moveDist: 0\n    },\n    currentEvent: null,\n    board: {\n      0: {\n        currency: 0\n      },\n      1: {\n        currency: 2\n      },\n      2: {\n        currency: 2\n      },\n      3: {\n        currency: -1\n      },\n      4: {\n        currency: 3\n      },\n      5: {\n        currency: 5\n      },\n      6: {\n        currency: 1\n      },\n      7: {\n        currency: 0\n      },\n      8: {\n        currency: 0\n      },\n      9: {\n        currency: -2\n      },\n      10: {\n        currency: 0\n      },\n      11: {\n        currency: 0\n      },\n      12: {\n        currency: 2\n      },\n      13: {\n        currency: 2\n      },\n      14: {\n        currency: -1\n      },\n      15: {\n        currency: 3\n      },\n      16: {\n        currency: -2\n      },\n      17: {\n        currency: 1\n      },\n      18: {\n        currency: 2\n      },\n      19: {\n        currency: 0\n      },\n      20: {\n        currency: -2\n      },\n      21: {\n        currency: 2\n      },\n      22: {\n        currency: -2\n      },\n      23: {\n        currency: -2\n      },\n      24: {\n        currency: 0\n      },\n      25: {\n        currency: 0\n      }\n    }\n  }),\n  turn: {\n    order: TurnOrder.CONTINUE\n  },\n  // Define the moves for rolling the dice and updating the game state.\n  moves: {\n    rollDice: _ref => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref;\n      const die1 = Math.floor(Math.random() * 6) + 1;\n      const die2 = Math.floor(Math.random() * 6) + 1;\n      let moveDist = die1 + die2;\n      G.moveDist = moveDist;\n      G.players[ctx.currentPlayer].position += moveDist;\n\n      // Check for players active buffs\n      G.players[ctx.currentPlayer].buffs.forEach(buff => {\n        if (buff.type === \"moMoneyBuff\") {\n          moveDist += 1;\n          buff.duration--;\n          if (buff.duration === 0) {\n            G.players[ctx.currentPlayer].buffs.splice(G.players[ctx.currentPlayer].buffs.indexOf(buff), 1);\n          }\n        }\n      });\n      let randIntEvent = Math.floor(Math.random() * eventsArray.length);\n      G.currentEvent = eventsArray[randIntEvent];\n      events.setPhase(\"eventOrItemScreen\");\n    },\n    addCurrency: (_ref2, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref2;\n      G.players[ctx.currentPlayer].currency += currency;\n    },\n    loseCurrency: (_ref3, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref3;\n      G.players[ctx.currentPlayer].currency -= currency;\n    },\n    moveForward: (_ref4, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref4;\n      G.players[ctx.currentPlayer].position += moveDist;\n    },\n    moveBackward: (_ref5, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref5;\n      G.players[ctx.currentPlayer].position -= moveDist;\n    },\n    pickUpItem: _ref6 => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref6;\n      const itemCell = G.board[G.players[ctx.currentPlayer].position];\n      const itemRef = itemCell.item;\n      G.players[ctx.currentPlayer].inventory.push(itemRef);\n    },\n    staffOfMoMoney: _ref7 => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref7;\n      // G.players[ctx.currentPlayer].buffs.push({ type: \"moMoneyBuff\", duration: 3 });\n      console.log(\"staff of mo money function\");\n      G.players[ctx.currentPlayer] += Math.random() * 5;\n    },\n    useItem: (_ref8, item) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref8;\n      console.log(\"use item function\");\n      const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n      G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n    },\n    applyBuff: (_ref9, playerId, buffType, duration) => {\n      let {\n        G,\n        ctx\n      } = _ref9;\n      G.players[playerId].buffs.push({\n        type: buffType,\n        duration: duration\n      });\n    },\n    moveNoEvent: _ref10 => {\n      let {\n        G,\n        ctx\n      } = _ref10;\n      let moveDist = 5;\n      G.players[ctx.currentPlayer].position += moveDist;\n    }\n\n    // setCurrentEvent: ({G, ctx}, currentEvent) => {\n    //     G.currentEvent = currentEvent;\n    // },\n  },\n\n  phases: {\n    rollScreen: {\n      start: true\n    },\n    eventOrItemScreen: {},\n    itemScreen: {},\n    eventScreen: {},\n    correctAnswerScreen: {},\n    wrongAnswerScreen: {},\n    endTurnScreen: {},\n    pickUpItemScreen: {}\n  }\n};","map":{"version":3,"names":["TurnOrder","Client","Server","Game","eventsArray","react","UpwardMobilityBoard","UpwardsMobility","setup","players","position","inventory","buffs","currency","moveDist","currentEvent","board","turn","order","CONTINUE","moves","rollDice","_ref","G","ctx","events","die1","Math","floor","random","die2","currentPlayer","forEach","buff","type","duration","splice","indexOf","randIntEvent","length","setPhase","addCurrency","_ref2","loseCurrency","_ref3","moveForward","_ref4","moveBackward","_ref5","pickUpItem","_ref6","itemCell","itemRef","item","push","staffOfMoMoney","_ref7","console","log","useItem","_ref8","itemIndex","applyBuff","_ref9","playerId","buffType","moveNoEvent","_ref10","phases","rollScreen","start","eventOrItemScreen","itemScreen","eventScreen","correctAnswerScreen","wrongAnswerScreen","endTurnScreen","pickUpItemScreen"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Game.js"],"sourcesContent":["import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\nimport { eventsArray} from \"./eventsfile\";\n// import { getEvent} from \"./eventsfile\";\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nexport const UpwardsMobility = {\n\n    // Turn phase flow\n    // 1) Roll dice move piece\n    // 2) Choose event or use item\n    // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n    // if correct answer than they pick up item and or gain currency then end turn\n    // if incorrect answer than negativeness happens then end turn\n    // 3b) If they choose the item, activate the item and do item thing and then show event\n\n    // rollScreen\n    // eventOrItemScreen\n    // itemScreen\n    // eventScreen\n    // correctAnswerScreen\n    // wrongAnswerScreen\n    // endTurnScreen\n\n  setup: () => ({\n    players: {\n      0: {\n        position: 0,\n        inventory: ['Staff of MoMoney', 'Staff of NoMoney', 'Orb of Steal Yo Buffs'],\n          buffs: [],\n          currency: 0,\n      },\n      1: {\n        position: 0,\n        inventory: ['Orb of MoMoney', 'Orb of NoMoney', 'Orb of Steal Yo Buffs'],\n          buffs: [],\n          currency: 0,\n      },\n        moveDist: 0,\n    },\n\n      currentEvent: null,\n\n      board: {\n          0: { currency: 0 },\n          1: { currency: 2 },\n          2: { currency: 2 },\n          3: { currency: -1 },\n          4: { currency: 3 },\n          5: { currency: 5, },\n          6: { currency: 1 },\n          7: { currency: 0 },\n          8: { currency: 0 },\n          9: { currency: -2 },\n          10: { currency: 0 },\n          11: { currency: 0 },\n          12: { currency: 2 },\n          13: { currency: 2 },\n          14: { currency: -1 },\n          15: { currency: 3 },\n          16: { currency: -2 },\n          17: { currency: 1 },\n          18: { currency: 2 },\n          19: { currency: 0 },\n          20: { currency: -2 },\n          21: { currency: 2 },\n          22: { currency: -2 },\n          23: { currency: -2 },\n          24: { currency: 0 },\n          25: { currency: 0 },\n      },\n\n\n  }),\n    turn: {\n        order: TurnOrder.CONTINUE,\n    },\n\n    // Define the moves for rolling the dice and updating the game state.\n    moves: {\n      rollDice: ({G, ctx, events}) => {\n          const die1 = Math.floor(Math.random() * 6) + 1;\n          const die2 = Math.floor(Math.random() * 6) + 1;\n          let moveDist = die1 + die2;\n          G.moveDist = moveDist;\n          G.players[ctx.currentPlayer].position += moveDist;\n\n          // Check for players active buffs\n          G.players[ctx.currentPlayer].buffs.forEach((buff) => {\n              if (buff.type === \"moMoneyBuff\") {\n                  moveDist += 1;\n                  buff.duration--;\n                  if (buff.duration === 0) {\n                      G.players[ctx.currentPlayer].buffs.splice(\n                          G.players[ctx.currentPlayer].buffs.indexOf(buff),\n                          1\n                      );\n                  }\n              }\n          });\n\n          let randIntEvent = Math.floor(Math.random() * eventsArray.length);\n          G.currentEvent = eventsArray[randIntEvent];\n              events.setPhase(\"eventOrItemScreen\");\n      },\n\n        addCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency += currency;\n        },\n\n        loseCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency -= currency;\n        },\n\n        moveForward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position += moveDist;\n        },\n\n        moveBackward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position -= moveDist;\n        },\n\n        pickUpItem: ({G, ctx, events}) => {\n            const itemCell = G.board[G.players[ctx.currentPlayer].position];\n            const itemRef = itemCell.item;\n\n            G.players[ctx.currentPlayer].inventory.push(itemRef);\n\n        },\n\n        staffOfMoMoney: ({G, ctx, events}) => {\n            // G.players[ctx.currentPlayer].buffs.push({ type: \"moMoneyBuff\", duration: 3 });\n            console.log(\"staff of mo money function\");\n            G.players[ctx.currentPlayer] += Math.random() * 5;\n        },\n\n        useItem: ({G, ctx, events}, item) => {\n\n          console.log(\"use item function\");\n\n          const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n          G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n\n        },\n\n        applyBuff: ({ G, ctx }, playerId, buffType, duration) => {\n            G.players[playerId].buffs.push({ type: buffType, duration: duration });\n        },\n\n        moveNoEvent: ({ G, ctx }) => {\n          let moveDist = 5;\n          G.players[ctx.currentPlayer].position += moveDist;\n\n        },\n\n        // setCurrentEvent: ({G, ctx}, currentEvent) => {\n        //     G.currentEvent = currentEvent;\n        // },\n\n    },\n    phases: {\n        rollScreen: {\n            start: true\n        },\n        eventOrItemScreen: {\n\n        },\n        itemScreen: {\n\n        },\n        eventScreen: {\n\n        },\n        correctAnswerScreen: {\n\n        },\n        wrongAnswerScreen: {\n\n        },\n        endTurnScreen: {\n\n        },\n        pickUpItemScreen: {\n\n        }\n    },\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}